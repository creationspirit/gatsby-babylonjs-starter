{"version":3,"sources":["webpack:///./node_modules/@babylonjs/core/Maths/math.vector.js"],"names":["Vector2","x","y","this","prototype","toString","getClassName","getHashCode","hash","toArray","array","index","asArray","result","Array","copyFrom","source","copyFromFloats","set","add","otherVector","addToRef","addInPlace","addVector3","subtract","subtractToRef","subtractInPlace","multiplyInPlace","multiply","multiplyToRef","multiplyByFloats","divide","divideToRef","divideInPlace","negate","negateInPlace","negateToRef","scaleInPlace","scale","scaleToRef","scaleAndAddToRef","equals","equalsWithEpsilon","epsilon","WithinEpsilon","floor","Math","fract","length","sqrt","lengthSquared","normalize","len","clone","Zero","One","FromArray","offset","FromArrayToRef","CatmullRom","value1","value2","value3","value4","amount","squared","cubed","Clamp","value","min","max","Hermite","tangent1","tangent2","part1","part2","part3","part4","Lerp","start","end","Dot","left","right","Normalize","vector","newVector","Minimize","Maximize","Transform","transformation","r","TransformToRef","m","PointInTriangle","p","p0","p1","p2","a","sign","s","t","Distance","DistanceSquared","Center","center","DistanceOfPointFromSegment","segA","segB","l2","v","proj","Vector3","z","toQuaternion","Quaternion","RotationYawPitchRoll","addInPlaceFromFloats","subtractFromFloatsToRef","subtractFromFloats","equalsToFloats","minimizeInPlace","other","minimizeInPlaceFromFloats","maximizeInPlace","maximizeInPlaceFromFloats","isNonUniformWithinEpsilon","absX","abs","absY","absZ","Object","defineProperty","get","enumerable","configurable","normalizeFromLength","reorderInPlace","order","_this","toLowerCase","MathTmp","forEach","val","i","rotateByQuaternionToRef","quaternion","toRotationMatrix","Matrix","TransformCoordinatesToRef","rotateByQuaternionAroundPointToRef","point","cross","Cross","normalizeToNew","normalized","normalizeToRef","reference","setAll","GetClipFactor","vector0","vector1","axis","size","d0","GetAngleBetweenVectors","normal","v0","v1","dot","n","CrossToRef","acos","FromFloatArray","FromFloatArrayToRef","FromFloatsToRef","Up","_UpReadOnly","_ZeroReadOnly","Down","Forward","Backward","Right","Left","TransformCoordinates","TransformCoordinatesFromFloatsToRef","rx","ry","rz","rw","TransformNormal","TransformNormalToRef","TransformNormalFromFloatsToRef","ClampToRef","CheckExtends","LerpToRef","NormalizeToRef","Project","world","transform","viewport","cw","width","ch","height","cx","cy","viewportMatrix","FromValuesToRef","matrix","_UnprojectFromInvertedMatrixToRef","num","UnprojectFromTransform","viewportWidth","viewportHeight","invert","Unproject","view","projection","UnprojectToRef","UnprojectFloatsToRef","sourceX","sourceY","sourceZ","screenSource","RotationFromAxis","axis1","axis2","axis3","rotation","RotationFromAxisToRef","ref","quat","RotationQuaternionFromAxisToRef","toEulerAnglesToRef","Vector4","w","undefined","toVector3","FromVector3","otherQuaternion","q1","conjugateToRef","conjugateInPlace","conjugate","inv","toEulerAngles","qz","qx","qy","qw","sqw","sqz","sqx","sqy","zAxisY","atan2","PI","asin","FromQuaternionToRef","fromRotationMatrix","FromRotationMatrixToRef","FromRotationMatrix","data","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","AreClose","quat0","quat1","Inverse","q","InverseToRef","Identity","IsIdentity","RotationAxis","angle","RotationAxisToRef","sin","cos","FromEulerAngles","RotationYawPitchRollToRef","FromEulerAnglesToRef","FromEulerVector","vec","FromEulerVectorToRef","yaw","pitch","roll","halfRoll","halfPitch","halfYaw","sinRoll","cosRoll","sinPitch","cosPitch","sinYaw","cosYaw","RotationAlphaBetaGamma","alpha","beta","gamma","RotationAlphaBetaGammaToRef","halfGammaPlusAlpha","halfGammaMinusAlpha","halfBeta","RotationQuaternionFromAxis","rotMat","FromXYZAxesToRef","Slerp","SlerpToRef","num2","num3","num4","flag","num5","num6","_isIdentity","_isIdentityDirty","_isIdentity3x2","_isIdentity3x2Dirty","updateFlag","_m","Float32Array","_updateIdentityStatus","_markAsUpdated","_updateFlagSeed","isIdentity","isIdentityDirty","isIdentity3x2","isIdentity3x2Dirty","isIdentityAs3x2","determinant","m00","m01","m02","m03","m10","m20","m30","det_22_33","det_21_33","det_21_32","det_20_33","det_20_32","det_20_31","invertToRef","reset","resultM","otherM","addToSelf","IdentityToRef","cofact_00","cofact_01","cofact_02","cofact_03","det","detInv","det_12_33","det_11_33","det_11_32","det_10_33","det_10_32","det_10_31","det_12_23","det_11_23","det_11_22","det_10_23","det_10_22","det_10_21","cofact_10","cofact_11","cofact_12","cofact_13","cofact_20","cofact_21","cofact_22","cofact_23","cofact_30","cofact_31","cofact_32","cofact_33","addAtIndex","multiplyAtIndex","setTranslationFromFloats","addTranslationFromFloats","setTranslation","vector3","getTranslation","getTranslationToRef","removeRotationAndScaling","copyToArray","o","multiplyToArray","tm0","tm1","tm2","tm3","tm4","tm5","tm6","tm7","tm8","tm9","tm10","tm11","tm12","tm13","tm14","tm15","om0","om1","om2","om3","om4","om5","om6","om7","om8","om9","om10","om11","om12","om13","om14","om15","om","decompose","translation","sx","sy","sz","getRow","setRow","row","setRowFromFloats","transpose","Transpose","transposeToRef","TransposeToRef","toNormalMatrix","tmp","getRotationMatrix","getRotationMatrixToRef","toggleModelMatrixHandInPlace","toggleProjectionMatrixHandInPlace","FromFloat32ArrayToRefScaled","_identityReadOnly","initialM11","initialM12","initialM13","initialM14","initialM21","initialM22","initialM23","initialM24","initialM31","initialM32","initialM33","initialM34","initialM41","initialM42","initialM43","initialM44","FromValues","Compose","ComposeToRef","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","identity","zero","RotationX","RotationXToRef","Invert","c","RotationY","RotationYToRef","RotationZ","RotationZToRef","c1","RotationAlignToRef","from","to","k","Scaling","ScalingToRef","Translation","TranslationToRef","startValue","endValue","gradient","startM","endM","DecomposeLerp","DecomposeLerpToRef","startScale","startRotation","startTranslation","endScale","endRotation","endTranslation","resultScale","resultRotation","resultTranslation","LookAtLH","eye","target","up","LookAtLHToRef","xAxis","yAxis","zAxis","xSquareLength","ex","ey","ez","LookAtRH","LookAtRHToRef","OrthoLH","znear","zfar","OrthoLHToRef","b","d","OrthoOffCenterLH","bottom","top","OrthoOffCenterLHToRef","i0","i1","OrthoOffCenterRH","OrthoOffCenterRHToRef","PerspectiveLH","PerspectiveFovLH","fov","aspect","PerspectiveFovLHToRef","isVerticalFovFixed","f","tan","PerspectiveFovReverseLHToRef","PerspectiveFovRH","PerspectiveFovRHToRef","PerspectiveFovReverseRHToRef","PerspectiveFovWebVRToRef","rightHanded","rightHandedFactor","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","GetFinalMatrix","zmin","zmax","GetAsMatrix2x2","GetAsMatrix3x3","rm","mm","Reflection","plane","ReflectionToRef","temp","temp2","temp3","xaxis","yaxis","zaxis","zw","zx","yw","xw","BuildArray","TmpVectors","RegisteredTypes"],"mappings":"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","file":"088d5a4e-50927d53e3585e36b89f.js","sourcesContent":["import \"core-js/modules/es6.typed.float32-array\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nimport { Scalar } from \"./math.scalar\";\nimport { Epsilon } from './math.constants';\nimport { ArrayTools } from '../Misc/arrayTools';\nimport { _TypeStore } from '../Misc/typeStore';\n/**\r\n * Class representing a vector containing 2 coordinates\r\n */\n\nvar Vector2 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Vector2 from the given x and y coordinates\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   */\n  function Vector2(\n  /** defines the first coordinate */\n  x,\n  /** defines the second coordinate */\n  y) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    this.x = x;\n    this.y = y;\n  }\n  /**\r\n   * Gets a string with the Vector2 coordinates\r\n   * @returns a string with the Vector2 coordinates\r\n   */\n\n\n  Vector2.prototype.toString = function () {\n    return \"{X: \" + this.x + \" Y:\" + this.y + \"}\";\n  };\n  /**\r\n   * Gets class name\r\n   * @returns the string \"Vector2\"\r\n   */\n\n\n  Vector2.prototype.getClassName = function () {\n    return \"Vector2\";\n  };\n  /**\r\n   * Gets current vector hash code\r\n   * @returns the Vector2 hash code as a number\r\n   */\n\n\n  Vector2.prototype.getHashCode = function () {\n    var hash = this.x | 0;\n    hash = hash * 397 ^ (this.y | 0);\n    return hash;\n  }; // Operators\n\n  /**\r\n   * Sets the Vector2 coordinates in the given array or Float32Array from the given index.\r\n   * @param array defines the source array\r\n   * @param index defines the offset in source array\r\n   * @returns the current Vector2\r\n   */\n\n\n  Vector2.prototype.toArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    array[index] = this.x;\n    array[index + 1] = this.y;\n    return this;\n  };\n  /**\r\n   * Copy the current vector to an array\r\n   * @returns a new array with 2 elements: the Vector2 coordinates.\r\n   */\n\n\n  Vector2.prototype.asArray = function () {\n    var result = new Array();\n    this.toArray(result, 0);\n    return result;\n  };\n  /**\r\n   * Sets the Vector2 coordinates with the given Vector2 coordinates\r\n   * @param source defines the source Vector2\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.copyFrom = function (source) {\n    this.x = source.x;\n    this.y = source.y;\n    return this;\n  };\n  /**\r\n   * Sets the Vector2 coordinates with the given floats\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.copyFromFloats = function (x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  };\n  /**\r\n   * Sets the Vector2 coordinates with the given floats\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.set = function (x, y) {\n    return this.copyFromFloats(x, y);\n  };\n  /**\r\n   * Add another vector with the current one\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\r\n   */\n\n\n  Vector2.prototype.add = function (otherVector) {\n    return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n  };\n  /**\r\n   * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.addToRef = function (otherVector, result) {\n    result.x = this.x + otherVector.x;\n    result.y = this.y + otherVector.y;\n    return this;\n  };\n  /**\r\n   * Set the Vector2 coordinates by adding the given Vector2 coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.addInPlace = function (otherVector) {\n    this.x += otherVector.x;\n    this.y += otherVector.y;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.addVector3 = function (otherVector) {\n    return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n  };\n  /**\r\n   * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.subtract = function (otherVector) {\n    return new Vector2(this.x - otherVector.x, this.y - otherVector.y);\n  };\n  /**\r\n   * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.subtractToRef = function (otherVector, result) {\n    result.x = this.x - otherVector.x;\n    result.y = this.y - otherVector.y;\n    return this;\n  };\n  /**\r\n   * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.subtractInPlace = function (otherVector) {\n    this.x -= otherVector.x;\n    this.y -= otherVector.y;\n    return this;\n  };\n  /**\r\n   * Multiplies in place the current Vector2 coordinates by the given ones\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.multiplyInPlace = function (otherVector) {\n    this.x *= otherVector.x;\n    this.y *= otherVector.y;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.multiply = function (otherVector) {\n    return new Vector2(this.x * otherVector.x, this.y * otherVector.y);\n  };\n  /**\r\n   * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.multiplyToRef = function (otherVector, result) {\n    result.x = this.x * otherVector.x;\n    result.y = this.y * otherVector.y;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.multiplyByFloats = function (x, y) {\n    return new Vector2(this.x * x, this.y * y);\n  };\n  /**\r\n   * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.divide = function (otherVector) {\n    return new Vector2(this.x / otherVector.x, this.y / otherVector.y);\n  };\n  /**\r\n   * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.divideToRef = function (otherVector, result) {\n    result.x = this.x / otherVector.x;\n    result.y = this.y / otherVector.y;\n    return this;\n  };\n  /**\r\n   * Divides the current Vector2 coordinates by the given ones\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.divideInPlace = function (otherVector) {\n    return this.divideToRef(otherVector, this);\n  };\n  /**\r\n   * Gets a new Vector2 with current Vector2 negated coordinates\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.negate = function () {\n    return new Vector2(-this.x, -this.y);\n  };\n  /**\r\n   * Negate this vector in place\r\n   * @returns this\r\n   */\n\n\n  Vector2.prototype.negateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    return this;\n  };\n  /**\r\n   * Negate the current Vector2 and stores the result in the given vector \"result\" coordinates\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector2\r\n   */\n\n\n  Vector2.prototype.negateToRef = function (result) {\n    return result.copyFromFloats(this.x * -1, this.y * -1);\n  };\n  /**\r\n   * Multiply the Vector2 coordinates by scale\r\n   * @param scale defines the scaling factor\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.scaleInPlace = function (scale) {\n    this.x *= scale;\n    this.y *= scale;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector2 scaled by \"scale\" from the current Vector2\r\n   * @param scale defines the scaling factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.scale = function (scale) {\n    var result = new Vector2(0, 0);\n    this.scaleToRef(scale, result);\n    return result;\n  };\n  /**\r\n   * Scale the current Vector2 values by a factor to a given Vector2\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector2 object where to store the result\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.scaleToRef = function (scale, result) {\n    result.x = this.x * scale;\n    result.y = this.y * scale;\n    return this;\n  };\n  /**\r\n   * Scale the current Vector2 values by a factor and add the result to a given Vector2\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector2 object where to store the result\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.scaleAndAddToRef = function (scale, result) {\n    result.x += this.x * scale;\n    result.y += this.y * scale;\n    return this;\n  };\n  /**\r\n   * Gets a boolean if two vectors are equals\r\n   * @param otherVector defines the other vector\r\n   * @returns true if the given vector coordinates strictly equal the current Vector2 ones\r\n   */\n\n\n  Vector2.prototype.equals = function (otherVector) {\n    return otherVector && this.x === otherVector.x && this.y === otherVector.y;\n  };\n  /**\r\n   * Gets a boolean if two vectors are equals (using an epsilon value)\r\n   * @param otherVector defines the other vector\r\n   * @param epsilon defines the minimal distance to consider equality\r\n   * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\r\n   */\n\n\n  Vector2.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon);\n  };\n  /**\r\n   * Gets a new Vector2 from current Vector2 floored values\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.floor = function () {\n    return new Vector2(Math.floor(this.x), Math.floor(this.y));\n  };\n  /**\r\n   * Gets a new Vector2 from current Vector2 floored values\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.fract = function () {\n    return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\n  }; // Properties\n\n  /**\r\n   * Gets the length of the vector\r\n   * @returns the vector length (float)\r\n   */\n\n\n  Vector2.prototype.length = function () {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  };\n  /**\r\n   * Gets the vector squared length\r\n   * @returns the vector squared length (float)\r\n   */\n\n\n  Vector2.prototype.lengthSquared = function () {\n    return this.x * this.x + this.y * this.y;\n  }; // Methods\n\n  /**\r\n   * Normalize the vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.normalize = function () {\n    var len = this.length();\n\n    if (len === 0) {\n      return this;\n    }\n\n    this.x /= len;\n    this.y /= len;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector2 copied from the Vector2\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.clone = function () {\n    return new Vector2(this.x, this.y);\n  }; // Statics\n\n  /**\r\n   * Gets a new Vector2(0, 0)\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Zero = function () {\n    return new Vector2(0, 0);\n  };\n  /**\r\n   * Gets a new Vector2(1, 1)\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.One = function () {\n    return new Vector2(1, 1);\n  };\n  /**\r\n   * Gets a new Vector2 set from the given index element of the given array\r\n   * @param array defines the data source\r\n   * @param offset defines the offset in the data source\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    return new Vector2(array[offset], array[offset + 1]);\n  };\n  /**\r\n   * Sets \"result\" from the given index element of the given array\r\n   * @param array defines the data source\r\n   * @param offset defines the offset in the data source\r\n   * @param result defines the target vector\r\n   */\n\n\n  Vector2.FromArrayToRef = function (array, offset, result) {\n    result.x = array[offset];\n    result.y = array[offset + 1];\n  };\n  /**\r\n   * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\r\n   * @param value1 defines 1st point of control\r\n   * @param value2 defines 2nd point of control\r\n   * @param value3 defines 3rd point of control\r\n   * @param value4 defines 4th point of control\r\n   * @param amount defines the interpolation factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.CatmullRom = function (value1, value2, value3, value4, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n    var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\".\r\n   * If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate.\r\n   * If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\r\n   * @param value defines the value to clamp\r\n   * @param min defines the lower limit\r\n   * @param max defines the upper limit\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Clamp = function (value, min, max) {\n    var x = value.x;\n    x = x > max.x ? max.x : x;\n    x = x < min.x ? min.x : x;\n    var y = value.y;\n    y = y > max.y ? max.y : y;\n    y = y < min.y ? min.y : y;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\"\r\n   * @param value1 defines the 1st control point\r\n   * @param tangent1 defines the outgoing tangent\r\n   * @param value2 defines the 2nd control point\r\n   * @param tangent2 defines the incoming tangent\r\n   * @param amount defines the interpolation factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n    var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\r\n   * @param start defines the start vector\r\n   * @param end defines the end vector\r\n   * @param amount defines the interpolation factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Lerp = function (start, end, amount) {\n    var x = start.x + (end.x - start.x) * amount;\n    var y = start.y + (end.y - start.y) * amount;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Gets the dot product of the vector \"left\" and the vector \"right\"\r\n   * @param left defines first vector\r\n   * @param right defines second vector\r\n   * @returns the dot product (float)\r\n   */\n\n\n  Vector2.Dot = function (left, right) {\n    return left.x * right.x + left.y * right.y;\n  };\n  /**\r\n   * Returns a new Vector2 equal to the normalized given vector\r\n   * @param vector defines the vector to normalize\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Normalize = function (vector) {\n    var newVector = vector.clone();\n    newVector.normalize();\n    return newVector;\n  };\n  /**\r\n   * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\r\n   * @param left defines 1st vector\r\n   * @param right defines 2nd vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Minimize = function (left, right) {\n    var x = left.x < right.x ? left.x : right.x;\n    var y = left.y < right.y ? left.y : right.y;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\r\n   * @param left defines 1st vector\r\n   * @param right defines 2nd vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Maximize = function (left, right) {\n    var x = left.x > right.x ? left.x : right.x;\n    var y = left.y > right.y ? left.y : right.y;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\r\n   * @param vector defines the vector to transform\r\n   * @param transformation defines the matrix to apply\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Transform = function (vector, transformation) {\n    var r = Vector2.Zero();\n    Vector2.TransformToRef(vector, transformation, r);\n    return r;\n  };\n  /**\r\n   * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\r\n   * @param vector defines the vector to transform\r\n   * @param transformation defines the matrix to apply\r\n   * @param result defines the target vector\r\n   */\n\n\n  Vector2.TransformToRef = function (vector, transformation, result) {\n    var m = transformation.m;\n    var x = vector.x * m[0] + vector.y * m[4] + m[12];\n    var y = vector.x * m[1] + vector.y * m[5] + m[13];\n    result.x = x;\n    result.y = y;\n  };\n  /**\r\n   * Determines if a given vector is included in a triangle\r\n   * @param p defines the vector to test\r\n   * @param p0 defines 1st triangle point\r\n   * @param p1 defines 2nd triangle point\r\n   * @param p2 defines 3rd triangle point\r\n   * @returns true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\"\r\n   */\n\n\n  Vector2.PointInTriangle = function (p, p0, p1, p2) {\n    var a = 1 / 2 * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);\n    var sign = a < 0 ? -1 : 1;\n    var s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;\n    var t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;\n    return s > 0 && t > 0 && s + t < 2 * a * sign;\n  };\n  /**\r\n   * Gets the distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines first vector\r\n   * @param value2 defines second vector\r\n   * @returns the distance between vectors\r\n   */\n\n\n  Vector2.Distance = function (value1, value2) {\n    return Math.sqrt(Vector2.DistanceSquared(value1, value2));\n  };\n  /**\r\n   * Returns the squared distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines first vector\r\n   * @param value2 defines second vector\r\n   * @returns the squared distance between vectors\r\n   */\n\n\n  Vector2.DistanceSquared = function (value1, value2) {\n    var x = value1.x - value2.x;\n    var y = value1.y - value2.y;\n    return x * x + y * y;\n  };\n  /**\r\n   * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines first vector\r\n   * @param value2 defines second vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Center = function (value1, value2) {\n    var center = value1.add(value2);\n    center.scaleInPlace(0.5);\n    return center;\n  };\n  /**\r\n   * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\r\n   * @param p defines the middle point\r\n   * @param segA defines one point of the segment\r\n   * @param segB defines the other point of the segment\r\n   * @returns the shortest distance\r\n   */\n\n\n  Vector2.DistanceOfPointFromSegment = function (p, segA, segB) {\n    var l2 = Vector2.DistanceSquared(segA, segB);\n\n    if (l2 === 0.0) {\n      return Vector2.Distance(p, segA);\n    }\n\n    var v = segB.subtract(segA);\n    var t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\n    var proj = segA.add(v.multiplyByFloats(t, t));\n    return Vector2.Distance(p, proj);\n  };\n\n  return Vector2;\n}();\n\nexport { Vector2 };\n/**\r\n * Class used to store (x,y,z) vector representation\r\n * A Vector3 is the main object used in 3D geometry\r\n * It can represent etiher the coordinates of a point the space, either a direction\r\n * Reminder: js uses a left handed forward facing system\r\n */\n\nvar Vector3 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\r\n   * @param x defines the first coordinates (on X axis)\r\n   * @param y defines the second coordinates (on Y axis)\r\n   * @param z defines the third coordinates (on Z axis)\r\n   */\n  function Vector3(\n  /**\r\n   * Defines the first coordinates (on X axis)\r\n   */\n  x,\n  /**\r\n   * Defines the second coordinates (on Y axis)\r\n   */\n  y,\n  /**\r\n   * Defines the third coordinates (on Z axis)\r\n   */\n  z) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (z === void 0) {\n      z = 0;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\r\n   * Creates a string representation of the Vector3\r\n   * @returns a string with the Vector3 coordinates.\r\n   */\n\n\n  Vector3.prototype.toString = function () {\n    return \"{X: \" + this.x + \" Y:\" + this.y + \" Z:\" + this.z + \"}\";\n  };\n  /**\r\n   * Gets the class name\r\n   * @returns the string \"Vector3\"\r\n   */\n\n\n  Vector3.prototype.getClassName = function () {\n    return \"Vector3\";\n  };\n  /**\r\n   * Creates the Vector3 hash code\r\n   * @returns a number which tends to be unique between Vector3 instances\r\n   */\n\n\n  Vector3.prototype.getHashCode = function () {\n    var hash = this.x | 0;\n    hash = hash * 397 ^ (this.y | 0);\n    hash = hash * 397 ^ (this.z | 0);\n    return hash;\n  }; // Operators\n\n  /**\r\n   * Creates an array containing three elements : the coordinates of the Vector3\r\n   * @returns a new array of numbers\r\n   */\n\n\n  Vector3.prototype.asArray = function () {\n    var result = [];\n    this.toArray(result, 0);\n    return result;\n  };\n  /**\r\n   * Populates the given array or Float32Array from the given index with the successive coordinates of the Vector3\r\n   * @param array defines the destination array\r\n   * @param index defines the offset in the destination array\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.toArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    array[index] = this.x;\n    array[index + 1] = this.y;\n    array[index + 2] = this.z;\n    return this;\n  };\n  /**\r\n   * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\r\n   * @returns a new Quaternion object, computed from the Vector3 coordinates\r\n   */\n\n\n  Vector3.prototype.toQuaternion = function () {\n    return Quaternion.RotationYawPitchRoll(this.y, this.x, this.z);\n  };\n  /**\r\n   * Adds the given vector to the current Vector3\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.addInPlace = function (otherVector) {\n    return this.addInPlaceFromFloats(otherVector.x, otherVector.y, otherVector.z);\n  };\n  /**\r\n   * Adds the given coordinates to the current Vector3\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.addInPlaceFromFloats = function (x, y, z) {\n    this.x += x;\n    this.y += y;\n    this.z += z;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector3, result of the addition the current Vector3 and the given vector\r\n   * @param otherVector defines the second operand\r\n   * @returns the resulting Vector3\r\n   */\n\n\n  Vector3.prototype.add = function (otherVector) {\n    return new Vector3(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n  };\n  /**\r\n   * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.addToRef = function (otherVector, result) {\n    return result.copyFromFloats(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n  };\n  /**\r\n   * Subtract the given vector from the current Vector3\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.subtractInPlace = function (otherVector) {\n    this.x -= otherVector.x;\n    this.y -= otherVector.y;\n    this.z -= otherVector.z;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\r\n   * @param otherVector defines the second operand\r\n   * @returns the resulting Vector3\r\n   */\n\n\n  Vector3.prototype.subtract = function (otherVector) {\n    return new Vector3(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z);\n  };\n  /**\r\n   * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.subtractToRef = function (otherVector, result) {\n    return this.subtractFromFloatsToRef(otherVector.x, otherVector.y, otherVector.z, result);\n  };\n  /**\r\n   * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the resulting Vector3\r\n   */\n\n\n  Vector3.prototype.subtractFromFloats = function (x, y, z) {\n    return new Vector3(this.x - x, this.y - y, this.z - z);\n  };\n  /**\r\n   * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.subtractFromFloatsToRef = function (x, y, z, result) {\n    return result.copyFromFloats(this.x - x, this.y - y, this.z - z);\n  };\n  /**\r\n   * Gets a new Vector3 set with the current Vector3 negated coordinates\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.prototype.negate = function () {\n    return new Vector3(-this.x, -this.y, -this.z);\n  };\n  /**\r\n   * Negate this vector in place\r\n   * @returns this\r\n   */\n\n\n  Vector3.prototype.negateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n    return this;\n  };\n  /**\r\n   * Negate the current Vector3 and stores the result in the given vector \"result\" coordinates\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.negateToRef = function (result) {\n    return result.copyFromFloats(this.x * -1, this.y * -1, this.z * -1);\n  };\n  /**\r\n   * Multiplies the Vector3 coordinates by the float \"scale\"\r\n   * @param scale defines the multiplier factor\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.scaleInPlace = function (scale) {\n    this.x *= scale;\n    this.y *= scale;\n    this.z *= scale;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\r\n   * @param scale defines the multiplier factor\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.prototype.scale = function (scale) {\n    return new Vector3(this.x * scale, this.y * scale, this.z * scale);\n  };\n  /**\r\n   * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\r\n   * @param scale defines the multiplier factor\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.scaleToRef = function (scale, result) {\n    return result.copyFromFloats(this.x * scale, this.y * scale, this.z * scale);\n  };\n  /**\r\n   * Scale the current Vector3 values by a factor and add the result to a given Vector3\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the unmodified current Vector3\r\n   */\n\n\n  Vector3.prototype.scaleAndAddToRef = function (scale, result) {\n    return result.addInPlaceFromFloats(this.x * scale, this.y * scale, this.z * scale);\n  };\n  /**\r\n   * Returns true if the current Vector3 and the given vector coordinates are strictly equal\r\n   * @param otherVector defines the second operand\r\n   * @returns true if both vectors are equals\r\n   */\n\n\n  Vector3.prototype.equals = function (otherVector) {\n    return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z;\n  };\n  /**\r\n   * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\r\n   * @param otherVector defines the second operand\r\n   * @param epsilon defines the minimal distance to define values as equals\r\n   * @returns true if both vectors are distant less than epsilon\r\n   */\n\n\n  Vector3.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) && Scalar.WithinEpsilon(this.z, otherVector.z, epsilon);\n  };\n  /**\r\n   * Returns true if the current Vector3 coordinates equals the given floats\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns true if both vectors are equals\r\n   */\n\n\n  Vector3.prototype.equalsToFloats = function (x, y, z) {\n    return this.x === x && this.y === y && this.z === z;\n  };\n  /**\r\n   * Multiplies the current Vector3 coordinates by the given ones\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.multiplyInPlace = function (otherVector) {\n    this.x *= otherVector.x;\n    this.y *= otherVector.y;\n    this.z *= otherVector.z;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\r\n   * @param otherVector defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.multiply = function (otherVector) {\n    return this.multiplyByFloats(otherVector.x, otherVector.y, otherVector.z);\n  };\n  /**\r\n   * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.multiplyToRef = function (otherVector, result) {\n    return result.copyFromFloats(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z);\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.multiplyByFloats = function (x, y, z) {\n    return new Vector3(this.x * x, this.y * y, this.z * z);\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\r\n   * @param otherVector defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.divide = function (otherVector) {\n    return new Vector3(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n  };\n  /**\r\n   * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.divideToRef = function (otherVector, result) {\n    return result.copyFromFloats(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n  };\n  /**\r\n   * Divides the current Vector3 coordinates by the given ones.\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.divideInPlace = function (otherVector) {\n    return this.divideToRef(otherVector, this);\n  };\n  /**\r\n   * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.minimizeInPlace = function (other) {\n    return this.minimizeInPlaceFromFloats(other.x, other.y, other.z);\n  };\n  /**\r\n   * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.maximizeInPlace = function (other) {\n    return this.maximizeInPlaceFromFloats(other.x, other.y, other.z);\n  };\n  /**\r\n   * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.minimizeInPlaceFromFloats = function (x, y, z) {\n    if (x < this.x) {\n      this.x = x;\n    }\n\n    if (y < this.y) {\n      this.y = y;\n    }\n\n    if (z < this.z) {\n      this.z = z;\n    }\n\n    return this;\n  };\n  /**\r\n   * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.maximizeInPlaceFromFloats = function (x, y, z) {\n    if (x > this.x) {\n      this.x = x;\n    }\n\n    if (y > this.y) {\n      this.y = y;\n    }\n\n    if (z > this.z) {\n      this.z = z;\n    }\n\n    return this;\n  };\n  /**\r\n   * Due to float precision, scale of a mesh could be uniform but float values are off by a small fraction\r\n   * Check if is non uniform within a certain amount of decimal places to account for this\r\n   * @param epsilon the amount the values can differ\r\n   * @returns if the the vector is non uniform to a certain number of decimal places\r\n   */\n\n\n  Vector3.prototype.isNonUniformWithinEpsilon = function (epsilon) {\n    var absX = Math.abs(this.x);\n    var absY = Math.abs(this.y);\n\n    if (!Scalar.WithinEpsilon(absX, absY, epsilon)) {\n      return true;\n    }\n\n    var absZ = Math.abs(this.z);\n\n    if (!Scalar.WithinEpsilon(absX, absZ, epsilon)) {\n      return true;\n    }\n\n    if (!Scalar.WithinEpsilon(absY, absZ, epsilon)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Vector3.prototype, \"isNonUniform\", {\n    /**\r\n     * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\r\n     */\n    get: function get() {\n      var absX = Math.abs(this.x);\n      var absY = Math.abs(this.y);\n\n      if (absX !== absY) {\n        return true;\n      }\n\n      var absZ = Math.abs(this.z);\n\n      if (absX !== absZ) {\n        return true;\n      }\n\n      if (absY !== absZ) {\n        return true;\n      }\n\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Gets a new Vector3 from current Vector3 floored values\r\n   * @returns a new Vector3\r\n   */\n\n  Vector3.prototype.floor = function () {\n    return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\n  };\n  /**\r\n   * Gets a new Vector3 from current Vector3 floored values\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.prototype.fract = function () {\n    return new Vector3(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z));\n  }; // Properties\n\n  /**\r\n   * Gets the length of the Vector3\r\n   * @returns the length of the Vector3\r\n   */\n\n\n  Vector3.prototype.length = function () {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n  };\n  /**\r\n   * Gets the squared length of the Vector3\r\n   * @returns squared length of the Vector3\r\n   */\n\n\n  Vector3.prototype.lengthSquared = function () {\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n  };\n  /**\r\n   * Normalize the current Vector3.\r\n   * Please note that this is an in place operation.\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.normalize = function () {\n    return this.normalizeFromLength(this.length());\n  };\n  /**\r\n   * Reorders the x y z properties of the vector in place\r\n   * @param order new ordering of the properties (eg. for vector 1,2,3 with \"ZYX\" will produce 3,2,1)\r\n   * @returns the current updated vector\r\n   */\n\n\n  Vector3.prototype.reorderInPlace = function (order) {\n    var _this = this;\n\n    order = order.toLowerCase();\n\n    if (order === \"xyz\") {\n      return this;\n    }\n\n    MathTmp.Vector3[0].copyFrom(this);\n    [\"x\", \"y\", \"z\"].forEach(function (val, i) {\n      _this[val] = MathTmp.Vector3[0][order[i]];\n    });\n    return this;\n  };\n  /**\r\n   * Rotates the vector around 0,0,0 by a quaternion\r\n   * @param quaternion the rotation quaternion\r\n   * @param result vector to store the result\r\n   * @returns the resulting vector\r\n   */\n\n\n  Vector3.prototype.rotateByQuaternionToRef = function (quaternion, result) {\n    quaternion.toRotationMatrix(MathTmp.Matrix[0]);\n    Vector3.TransformCoordinatesToRef(this, MathTmp.Matrix[0], result);\n    return result;\n  };\n  /**\r\n   * Rotates a vector around a given point\r\n   * @param quaternion the rotation quaternion\r\n   * @param point the point to rotate around\r\n   * @param result vector to store the result\r\n   * @returns the resulting vector\r\n   */\n\n\n  Vector3.prototype.rotateByQuaternionAroundPointToRef = function (quaternion, point, result) {\n    this.subtractToRef(point, MathTmp.Vector3[0]);\n    MathTmp.Vector3[0].rotateByQuaternionToRef(quaternion, MathTmp.Vector3[0]);\n    point.addToRef(MathTmp.Vector3[0], result);\n    return result;\n  };\n  /**\r\n   * Returns a new Vector3 as the cross product of the current vector and the \"other\" one\r\n   * The cross product is then orthogonal to both current and \"other\"\r\n   * @param other defines the right operand\r\n   * @returns the cross product\r\n   */\n\n\n  Vector3.prototype.cross = function (other) {\n    return Vector3.Cross(this, other);\n  };\n  /**\r\n   * Normalize the current Vector3 with the given input length.\r\n   * Please note that this is an in place operation.\r\n   * @param len the length of the vector\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.normalizeFromLength = function (len) {\n    if (len === 0 || len === 1.0) {\n      return this;\n    }\n\n    return this.scaleInPlace(1.0 / len);\n  };\n  /**\r\n   * Normalize the current Vector3 to a new vector\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.normalizeToNew = function () {\n    var normalized = new Vector3(0, 0, 0);\n    this.normalizeToRef(normalized);\n    return normalized;\n  };\n  /**\r\n   * Normalize the current Vector3 to the reference\r\n   * @param reference define the Vector3 to update\r\n   * @returns the updated Vector3\r\n   */\n\n\n  Vector3.prototype.normalizeToRef = function (reference) {\n    var len = this.length();\n\n    if (len === 0 || len === 1.0) {\n      return reference.copyFromFloats(this.x, this.y, this.z);\n    }\n\n    return this.scaleToRef(1.0 / len, reference);\n  };\n  /**\r\n   * Creates a new Vector3 copied from the current Vector3\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.clone = function () {\n    return new Vector3(this.x, this.y, this.z);\n  };\n  /**\r\n   * Copies the given vector coordinates to the current Vector3 ones\r\n   * @param source defines the source Vector3\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.copyFrom = function (source) {\n    return this.copyFromFloats(source.x, source.y, source.z);\n  };\n  /**\r\n   * Copies the given floats to the current Vector3 coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.copyFromFloats = function (x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  };\n  /**\r\n   * Copies the given floats to the current Vector3 coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.set = function (x, y, z) {\n    return this.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Copies the given float to the current Vector3 coordinates\r\n   * @param v defines the x, y and z coordinates of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.setAll = function (v) {\n    this.x = this.y = this.z = v;\n    return this;\n  }; // Statics\n\n  /**\r\n   * Get the clip factor between two vectors\r\n   * @param vector0 defines the first operand\r\n   * @param vector1 defines the second operand\r\n   * @param axis defines the axis to use\r\n   * @param size defines the size along the axis\r\n   * @returns the clip factor\r\n   */\n\n\n  Vector3.GetClipFactor = function (vector0, vector1, axis, size) {\n    var d0 = Vector3.Dot(vector0, axis) - size;\n    var d1 = Vector3.Dot(vector1, axis) - size;\n    var s = d0 / (d0 - d1);\n    return s;\n  };\n  /**\r\n   * Get angle between two vectors\r\n   * @param vector0 angle between vector0 and vector1\r\n   * @param vector1 angle between vector0 and vector1\r\n   * @param normal direction of the normal\r\n   * @return the angle between vector0 and vector1\r\n   */\n\n\n  Vector3.GetAngleBetweenVectors = function (vector0, vector1, normal) {\n    var v0 = vector0.normalizeToRef(MathTmp.Vector3[1]);\n    var v1 = vector1.normalizeToRef(MathTmp.Vector3[2]);\n    var dot = Vector3.Dot(v0, v1);\n    var n = MathTmp.Vector3[3];\n    Vector3.CrossToRef(v0, v1, n);\n\n    if (Vector3.Dot(n, normal) > 0) {\n      return Math.acos(dot);\n    }\n\n    return -Math.acos(dot);\n  };\n  /**\r\n   * Returns a new Vector3 set from the index \"offset\" of the given array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\n  };\n  /**\r\n   * Returns a new Vector3 set from the index \"offset\" of the given Float32Array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @returns the new Vector3\r\n   * @deprecated Please use FromArray instead.\r\n   */\n\n\n  Vector3.FromFloatArray = function (array, offset) {\n    return Vector3.FromArray(array, offset);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.FromArrayToRef = function (array, offset, result) {\n    result.x = array[offset];\n    result.y = array[offset + 1];\n    result.z = array[offset + 2];\n  };\n  /**\r\n   * Sets the given vector \"result\" with the element values from the index \"offset\" of the given Float32Array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @param result defines the Vector3 where to store the result\r\n   * @deprecated Please use FromArrayToRef instead.\r\n   */\n\n\n  Vector3.FromFloatArrayToRef = function (array, offset, result) {\n    return Vector3.FromArrayToRef(array, offset, result);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the given floats.\r\n   * @param x defines the x coordinate of the source\r\n   * @param y defines the y coordinate of the source\r\n   * @param z defines the z coordinate of the source\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.FromFloatsToRef = function (x, y, z, result) {\n    result.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 0.0, 0.0)\r\n   * @returns a new empty Vector3\r\n   */\n\n\n  Vector3.Zero = function () {\n    return new Vector3(0.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (1.0, 1.0, 1.0)\r\n   * @returns a new unit Vector3\r\n   */\n\n\n  Vector3.One = function () {\n    return new Vector3(1.0, 1.0, 1.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 1.0, 0.0)\r\n   * @returns a new up Vector3\r\n   */\n\n\n  Vector3.Up = function () {\n    return new Vector3(0.0, 1.0, 0.0);\n  };\n\n  Object.defineProperty(Vector3, \"UpReadOnly\", {\n    /**\r\n     * Gets a up Vector3 that must not be updated\r\n     */\n    get: function get() {\n      return Vector3._UpReadOnly;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Vector3, \"ZeroReadOnly\", {\n    /**\r\n     * Gets a zero Vector3 that must not be updated\r\n     */\n    get: function get() {\n      return Vector3._ZeroReadOnly;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a new Vector3 set to (0.0, -1.0, 0.0)\r\n   * @returns a new down Vector3\r\n   */\n\n  Vector3.Down = function () {\n    return new Vector3(0.0, -1.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 0.0, 1.0)\r\n   * @returns a new forward Vector3\r\n   */\n\n\n  Vector3.Forward = function () {\n    return new Vector3(0.0, 0.0, 1.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 0.0, -1.0)\r\n   * @returns a new forward Vector3\r\n   */\n\n\n  Vector3.Backward = function () {\n    return new Vector3(0.0, 0.0, -1.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (1.0, 0.0, 0.0)\r\n   * @returns a new right Vector3\r\n   */\n\n\n  Vector3.Right = function () {\n    return new Vector3(1.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\r\n   * @returns a new left Vector3\r\n   */\n\n\n  Vector3.Left = function () {\n    return new Vector3(-1.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\r\n   * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @returns the transformed Vector3\r\n   */\n\n\n  Vector3.TransformCoordinates = function (vector, transformation) {\n    var result = Vector3.Zero();\n    Vector3.TransformCoordinatesToRef(vector, transformation, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\r\n   * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformCoordinatesToRef = function (vector, transformation, result) {\n    Vector3.TransformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n  };\n  /**\r\n   * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\r\n   * This method computes tranformed coordinates only, not transformed direction vectors\r\n   * @param x define the x coordinate of the source vector\r\n   * @param y define the y coordinate of the source vector\r\n   * @param z define the z coordinate of the source vector\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformCoordinatesFromFloatsToRef = function (x, y, z, transformation, result) {\n    var m = transformation.m;\n    var rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n    var ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n    var rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n    var rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\n    result.x = rx * rw;\n    result.y = ry * rw;\n    result.z = rz * rw;\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\r\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.TransformNormal = function (vector, transformation) {\n    var result = Vector3.Zero();\n    Vector3.TransformNormalToRef(vector, transformation, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\r\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformNormalToRef = function (vector, transformation, result) {\n    this.TransformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\r\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n   * @param x define the x coordinate of the source vector\r\n   * @param y define the y coordinate of the source vector\r\n   * @param z define the z coordinate of the source vector\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformNormalFromFloatsToRef = function (x, y, z, transformation, result) {\n    var m = transformation.m;\n    result.x = x * m[0] + y * m[4] + z * m[8];\n    result.y = x * m[1] + y * m[5] + z * m[9];\n    result.z = x * m[2] + y * m[6] + z * m[10];\n  };\n  /**\r\n   * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\r\n   * @param value1 defines the first control point\r\n   * @param value2 defines the second control point\r\n   * @param value3 defines the third control point\r\n   * @param value4 defines the fourth control point\r\n   * @param amount defines the amount on the spline to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.CatmullRom = function (value1, value2, value3, value4, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n    var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n    var z = 0.5 * (2.0 * value2.z + (-value1.z + value3.z) * amount + (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) * squared + (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);\n    return new Vector3(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\r\n   * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\r\n   * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\r\n   * @param value defines the current value\r\n   * @param min defines the lower range value\r\n   * @param max defines the upper range value\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Clamp = function (value, min, max) {\n    var v = new Vector3();\n    Vector3.ClampToRef(value, min, max, v);\n    return v;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\r\n   * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\r\n   * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\r\n   * @param value defines the current value\r\n   * @param min defines the lower range value\r\n   * @param max defines the upper range value\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.ClampToRef = function (value, min, max, result) {\n    var x = value.x;\n    x = x > max.x ? max.x : x;\n    x = x < min.x ? min.x : x;\n    var y = value.y;\n    y = y > max.y ? max.y : y;\n    y = y < min.y ? min.y : y;\n    var z = value.z;\n    z = z > max.z ? max.z : z;\n    z = z < min.z ? min.z : z;\n    result.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Checks if a given vector is inside a specific range\r\n   * @param v defines the vector to test\r\n   * @param min defines the minimum range\r\n   * @param max defines the maximum range\r\n   */\n\n\n  Vector3.CheckExtends = function (v, min, max) {\n    min.minimizeInPlace(v);\n    max.maximizeInPlace(v);\n  };\n  /**\r\n   * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\r\n   * @param value1 defines the first control point\r\n   * @param tangent1 defines the first tangent vector\r\n   * @param value2 defines the second control point\r\n   * @param tangent2 defines the second tangent vector\r\n   * @param amount defines the amount on the interpolation spline (between 0 and 1)\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n    var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n    var z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;\n    return new Vector3(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\r\n   * @param start defines the start value\r\n   * @param end defines the end value\r\n   * @param amount max defines amount between both (between 0 and 1)\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Lerp = function (start, end, amount) {\n    var result = new Vector3(0, 0, 0);\n    Vector3.LerpToRef(start, end, amount, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\r\n   * @param start defines the start value\r\n   * @param end defines the end value\r\n   * @param amount max defines amount between both (between 0 and 1)\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.LerpToRef = function (start, end, amount, result) {\n    result.x = start.x + (end.x - start.x) * amount;\n    result.y = start.y + (end.y - start.y) * amount;\n    result.z = start.z + (end.z - start.z) * amount;\n  };\n  /**\r\n   * Returns the dot product (float) between the vectors \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @returns the dot product\r\n   */\n\n\n  Vector3.Dot = function (left, right) {\n    return left.x * right.x + left.y * right.y + left.z * right.z;\n  };\n  /**\r\n   * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\r\n   * The cross product is then orthogonal to both \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @returns the cross product\r\n   */\n\n\n  Vector3.Cross = function (left, right) {\n    var result = Vector3.Zero();\n    Vector3.CrossToRef(left, right, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\r\n   * The cross product is then orthogonal to both \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.CrossToRef = function (left, right, result) {\n    var x = left.y * right.z - left.z * right.y;\n    var y = left.z * right.x - left.x * right.z;\n    var z = left.x * right.y - left.y * right.x;\n    result.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 as the normalization of the given vector\r\n   * @param vector defines the Vector3 to normalize\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Normalize = function (vector) {\n    var result = Vector3.Zero();\n    Vector3.NormalizeToRef(vector, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the normalization of the given first vector\r\n   * @param vector defines the Vector3 to normalize\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.NormalizeToRef = function (vector, result) {\n    vector.normalizeToRef(result);\n  };\n  /**\r\n   * Project a Vector3 onto screen space\r\n   * @param vector defines the Vector3 to project\r\n   * @param world defines the world matrix to use\r\n   * @param transform defines the transform (view x projection) matrix to use\r\n   * @param viewport defines the screen viewport to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Project = function (vector, world, transform, viewport) {\n    var cw = viewport.width;\n    var ch = viewport.height;\n    var cx = viewport.x;\n    var cy = viewport.y;\n    var viewportMatrix = MathTmp.Matrix[1];\n    Matrix.FromValuesToRef(cw / 2.0, 0, 0, 0, 0, -ch / 2.0, 0, 0, 0, 0, 0.5, 0, cx + cw / 2.0, ch / 2.0 + cy, 0.5, 1, viewportMatrix);\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(transform, matrix);\n    matrix.multiplyToRef(viewportMatrix, matrix);\n    return Vector3.TransformCoordinates(vector, matrix);\n  };\n  /** @hidden */\n\n\n  Vector3._UnprojectFromInvertedMatrixToRef = function (source, matrix, result) {\n    Vector3.TransformCoordinatesToRef(source, matrix, result);\n    var m = matrix.m;\n    var num = source.x * m[3] + source.y * m[7] + source.z * m[11] + m[15];\n\n    if (Scalar.WithinEpsilon(num, 1.0)) {\n      result.scaleInPlace(1.0 / num);\n    }\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param source defines the screen space Vector3 to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param transform defines the transform (view x projection) matrix to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.UnprojectFromTransform = function (source, viewportWidth, viewportHeight, world, transform) {\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(transform, matrix);\n    matrix.invert();\n    source.x = source.x / viewportWidth * 2 - 1;\n    source.y = -(source.y / viewportHeight * 2 - 1);\n    var vector = new Vector3();\n\n    Vector3._UnprojectFromInvertedMatrixToRef(source, matrix, vector);\n\n    return vector;\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param source defines the screen space Vector3 to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param view defines the view matrix to use\r\n   * @param projection defines the projection matrix to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Unproject = function (source, viewportWidth, viewportHeight, world, view, projection) {\n    var result = Vector3.Zero();\n    Vector3.UnprojectToRef(source, viewportWidth, viewportHeight, world, view, projection, result);\n    return result;\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param source defines the screen space Vector3 to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param view defines the view matrix to use\r\n   * @param projection defines the projection matrix to use\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.UnprojectToRef = function (source, viewportWidth, viewportHeight, world, view, projection, result) {\n    Vector3.UnprojectFloatsToRef(source.x, source.y, source.z, viewportWidth, viewportHeight, world, view, projection, result);\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param sourceX defines the screen space x coordinate to use\r\n   * @param sourceY defines the screen space y coordinate to use\r\n   * @param sourceZ defines the screen space z coordinate to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param view defines the view matrix to use\r\n   * @param projection defines the projection matrix to use\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.UnprojectFloatsToRef = function (sourceX, sourceY, sourceZ, viewportWidth, viewportHeight, world, view, projection, result) {\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(view, matrix);\n    matrix.multiplyToRef(projection, matrix);\n    matrix.invert();\n    var screenSource = MathTmp.Vector3[0];\n    screenSource.x = sourceX / viewportWidth * 2 - 1;\n    screenSource.y = -(sourceY / viewportHeight * 2 - 1);\n    screenSource.z = 2 * sourceZ - 1.0;\n\n    Vector3._UnprojectFromInvertedMatrixToRef(screenSource, matrix, result);\n  };\n  /**\r\n   * Gets the minimal coordinate values between two Vector3\r\n   * @param left defines the first operand\r\n   * @param right defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Minimize = function (left, right) {\n    var min = left.clone();\n    min.minimizeInPlace(right);\n    return min;\n  };\n  /**\r\n   * Gets the maximal coordinate values between two Vector3\r\n   * @param left defines the first operand\r\n   * @param right defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Maximize = function (left, right) {\n    var max = left.clone();\n    max.maximizeInPlace(right);\n    return max;\n  };\n  /**\r\n   * Returns the distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines the first operand\r\n   * @param value2 defines the second operand\r\n   * @returns the distance\r\n   */\n\n\n  Vector3.Distance = function (value1, value2) {\n    return Math.sqrt(Vector3.DistanceSquared(value1, value2));\n  };\n  /**\r\n   * Returns the squared distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines the first operand\r\n   * @param value2 defines the second operand\r\n   * @returns the squared distance\r\n   */\n\n\n  Vector3.DistanceSquared = function (value1, value2) {\n    var x = value1.x - value2.x;\n    var y = value1.y - value2.y;\n    var z = value1.z - value2.z;\n    return x * x + y * y + z * z;\n  };\n  /**\r\n   * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\r\n   * @param value1 defines the first operand\r\n   * @param value2 defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Center = function (value1, value2) {\n    var center = value1.add(value2);\n    center.scaleInPlace(0.5);\n    return center;\n  };\n  /**\r\n   * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\r\n   * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\r\n   * to something in order to rotate it from its local system to the given target system\r\n   * Note: axis1, axis2 and axis3 are normalized during this operation\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.RotationFromAxis = function (axis1, axis2, axis3) {\n    var rotation = Vector3.Zero();\n    Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\n    return rotation;\n  };\n  /**\r\n   * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @param ref defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.RotationFromAxisToRef = function (axis1, axis2, axis3, ref) {\n    var quat = MathTmp.Quaternion[0];\n    Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n    quat.toEulerAnglesToRef(ref);\n  };\n\n  Vector3._UpReadOnly = Vector3.Up();\n  Vector3._ZeroReadOnly = Vector3.Zero();\n  return Vector3;\n}();\n\nexport { Vector3 };\n/**\r\n * Vector4 class created for EulerAngle class conversion to Quaternion\r\n */\n\nvar Vector4 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a Vector4 object from the given floats.\r\n   * @param x x value of the vector\r\n   * @param y y value of the vector\r\n   * @param z z value of the vector\r\n   * @param w w value of the vector\r\n   */\n  function Vector4(\n  /** x value of the vector */\n  x,\n  /** y value of the vector */\n  y,\n  /** z value of the vector */\n  z,\n  /** w value of the vector */\n  w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\r\n   * Returns the string with the Vector4 coordinates.\r\n   * @returns a string containing all the vector values\r\n   */\n\n\n  Vector4.prototype.toString = function () {\n    return \"{X: \" + this.x + \" Y:\" + this.y + \" Z:\" + this.z + \" W:\" + this.w + \"}\";\n  };\n  /**\r\n   * Returns the string \"Vector4\".\r\n   * @returns \"Vector4\"\r\n   */\n\n\n  Vector4.prototype.getClassName = function () {\n    return \"Vector4\";\n  };\n  /**\r\n   * Returns the Vector4 hash code.\r\n   * @returns a unique hash code\r\n   */\n\n\n  Vector4.prototype.getHashCode = function () {\n    var hash = this.x | 0;\n    hash = hash * 397 ^ (this.y | 0);\n    hash = hash * 397 ^ (this.z | 0);\n    hash = hash * 397 ^ (this.w | 0);\n    return hash;\n  }; // Operators\n\n  /**\r\n   * Returns a new array populated with 4 elements : the Vector4 coordinates.\r\n   * @returns the resulting array\r\n   */\n\n\n  Vector4.prototype.asArray = function () {\n    var result = new Array();\n    this.toArray(result, 0);\n    return result;\n  };\n  /**\r\n   * Populates the given array from the given index with the Vector4 coordinates.\r\n   * @param array array to populate\r\n   * @param index index of the array to start at (default: 0)\r\n   * @returns the Vector4.\r\n   */\n\n\n  Vector4.prototype.toArray = function (array, index) {\n    if (index === undefined) {\n      index = 0;\n    }\n\n    array[index] = this.x;\n    array[index + 1] = this.y;\n    array[index + 2] = this.z;\n    array[index + 3] = this.w;\n    return this;\n  };\n  /**\r\n   * Adds the given vector to the current Vector4.\r\n   * @param otherVector the vector to add\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.addInPlace = function (otherVector) {\n    this.x += otherVector.x;\n    this.y += otherVector.y;\n    this.z += otherVector.z;\n    this.w += otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\r\n   * @param otherVector the vector to add\r\n   * @returns the resulting vector\r\n   */\n\n\n  Vector4.prototype.add = function (otherVector) {\n    return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\n  };\n  /**\r\n   * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\r\n   * @param otherVector the vector to add\r\n   * @param result the vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.addToRef = function (otherVector, result) {\n    result.x = this.x + otherVector.x;\n    result.y = this.y + otherVector.y;\n    result.z = this.z + otherVector.z;\n    result.w = this.w + otherVector.w;\n    return this;\n  };\n  /**\r\n   * Subtract in place the given vector from the current Vector4.\r\n   * @param otherVector the vector to subtract\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.subtractInPlace = function (otherVector) {\n    this.x -= otherVector.x;\n    this.y -= otherVector.y;\n    this.z -= otherVector.z;\n    this.w -= otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\r\n   * @param otherVector the vector to add\r\n   * @returns the new vector with the result\r\n   */\n\n\n  Vector4.prototype.subtract = function (otherVector) {\n    return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\r\n   * @param otherVector the vector to subtract\r\n   * @param result the vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.subtractToRef = function (otherVector, result) {\n    result.x = this.x - otherVector.x;\n    result.y = this.y - otherVector.y;\n    result.z = this.z - otherVector.z;\n    result.w = this.w - otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n   */\n\n  /**\r\n   * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n   * @param x value to subtract\r\n   * @param y value to subtract\r\n   * @param z value to subtract\r\n   * @param w value to subtract\r\n   * @returns new vector containing the result\r\n   */\n\n\n  Vector4.prototype.subtractFromFloats = function (x, y, z, w) {\n    return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);\n  };\n  /**\r\n   * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n   * @param x value to subtract\r\n   * @param y value to subtract\r\n   * @param z value to subtract\r\n   * @param w value to subtract\r\n   * @param result the vector to store the result in\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.subtractFromFloatsToRef = function (x, y, z, w, result) {\n    result.x = this.x - x;\n    result.y = this.y - y;\n    result.z = this.z - z;\n    result.w = this.w - w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the current Vector4 negated coordinates.\r\n   * @returns a new vector with the negated values\r\n   */\n\n\n  Vector4.prototype.negate = function () {\n    return new Vector4(-this.x, -this.y, -this.z, -this.w);\n  };\n  /**\r\n   * Negate this vector in place\r\n   * @returns this\r\n   */\n\n\n  Vector4.prototype.negateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n    this.w *= -1;\n    return this;\n  };\n  /**\r\n   * Negate the current Vector4 and stores the result in the given vector \"result\" coordinates\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector4\r\n   */\n\n\n  Vector4.prototype.negateToRef = function (result) {\n    return result.copyFromFloats(this.x * -1, this.y * -1, this.z * -1, this.w * -1);\n  };\n  /**\r\n   * Multiplies the current Vector4 coordinates by scale (float).\r\n   * @param scale the number to scale with\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.scaleInPlace = function (scale) {\n    this.x *= scale;\n    this.y *= scale;\n    this.z *= scale;\n    this.w *= scale;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\r\n   * @param scale the number to scale with\r\n   * @returns a new vector with the result\r\n   */\n\n\n  Vector4.prototype.scale = function (scale) {\n    return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\r\n   * @param scale the number to scale with\r\n   * @param result a vector to store the result in\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.scaleToRef = function (scale, result) {\n    result.x = this.x * scale;\n    result.y = this.y * scale;\n    result.z = this.z * scale;\n    result.w = this.w * scale;\n    return this;\n  };\n  /**\r\n   * Scale the current Vector4 values by a factor and add the result to a given Vector4\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector4 object where to store the result\r\n   * @returns the unmodified current Vector4\r\n   */\n\n\n  Vector4.prototype.scaleAndAddToRef = function (scale, result) {\n    result.x += this.x * scale;\n    result.y += this.y * scale;\n    result.z += this.z * scale;\n    result.w += this.w * scale;\n    return this;\n  };\n  /**\r\n   * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\r\n   * @param otherVector the vector to compare against\r\n   * @returns true if they are equal\r\n   */\n\n\n  Vector4.prototype.equals = function (otherVector) {\n    return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z && this.w === otherVector.w;\n  };\n  /**\r\n   * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\r\n   * @param otherVector vector to compare against\r\n   * @param epsilon (Default: very small number)\r\n   * @returns true if they are equal\r\n   */\n\n\n  Vector4.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) && Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) && Scalar.WithinEpsilon(this.w, otherVector.w, epsilon);\n  };\n  /**\r\n   * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\r\n   * @param x x value to compare against\r\n   * @param y y value to compare against\r\n   * @param z z value to compare against\r\n   * @param w w value to compare against\r\n   * @returns true if equal\r\n   */\n\n\n  Vector4.prototype.equalsToFloats = function (x, y, z, w) {\n    return this.x === x && this.y === y && this.z === z && this.w === w;\n  };\n  /**\r\n   * Multiplies in place the current Vector4 by the given one.\r\n   * @param otherVector vector to multiple with\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.multiplyInPlace = function (otherVector) {\n    this.x *= otherVector.x;\n    this.y *= otherVector.y;\n    this.z *= otherVector.z;\n    this.w *= otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\r\n   * @param otherVector vector to multiple with\r\n   * @returns resulting new vector\r\n   */\n\n\n  Vector4.prototype.multiply = function (otherVector) {\n    return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\n  };\n  /**\r\n   * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\r\n   * @param otherVector vector to multiple with\r\n   * @param result vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.multiplyToRef = function (otherVector, result) {\n    result.x = this.x * otherVector.x;\n    result.y = this.y * otherVector.y;\n    result.z = this.z * otherVector.z;\n    result.w = this.w * otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\r\n   * @param x x value multiply with\r\n   * @param y y value multiply with\r\n   * @param z z value multiply with\r\n   * @param w w value multiply with\r\n   * @returns resulting new vector\r\n   */\n\n\n  Vector4.prototype.multiplyByFloats = function (x, y, z, w) {\n    return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);\n  };\n  /**\r\n   * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\r\n   * @param otherVector vector to devide with\r\n   * @returns resulting new vector\r\n   */\n\n\n  Vector4.prototype.divide = function (otherVector) {\n    return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\n  };\n  /**\r\n   * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\r\n   * @param otherVector vector to devide with\r\n   * @param result vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.divideToRef = function (otherVector, result) {\n    result.x = this.x / otherVector.x;\n    result.y = this.y / otherVector.y;\n    result.z = this.z / otherVector.z;\n    result.w = this.w / otherVector.w;\n    return this;\n  };\n  /**\r\n   * Divides the current Vector3 coordinates by the given ones.\r\n   * @param otherVector vector to devide with\r\n   * @returns the updated Vector3.\r\n   */\n\n\n  Vector4.prototype.divideInPlace = function (otherVector) {\n    return this.divideToRef(otherVector, this);\n  };\n  /**\r\n   * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector4\r\n   */\n\n\n  Vector4.prototype.minimizeInPlace = function (other) {\n    if (other.x < this.x) {\n      this.x = other.x;\n    }\n\n    if (other.y < this.y) {\n      this.y = other.y;\n    }\n\n    if (other.z < this.z) {\n      this.z = other.z;\n    }\n\n    if (other.w < this.w) {\n      this.w = other.w;\n    }\n\n    return this;\n  };\n  /**\r\n   * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector4\r\n   */\n\n\n  Vector4.prototype.maximizeInPlace = function (other) {\n    if (other.x > this.x) {\n      this.x = other.x;\n    }\n\n    if (other.y > this.y) {\n      this.y = other.y;\n    }\n\n    if (other.z > this.z) {\n      this.z = other.z;\n    }\n\n    if (other.w > this.w) {\n      this.w = other.w;\n    }\n\n    return this;\n  };\n  /**\r\n   * Gets a new Vector4 from current Vector4 floored values\r\n   * @returns a new Vector4\r\n   */\n\n\n  Vector4.prototype.floor = function () {\n    return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\n  };\n  /**\r\n   * Gets a new Vector4 from current Vector3 floored values\r\n   * @returns a new Vector4\r\n   */\n\n\n  Vector4.prototype.fract = function () {\n    return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\n  }; // Properties\n\n  /**\r\n   * Returns the Vector4 length (float).\r\n   * @returns the length\r\n   */\n\n\n  Vector4.prototype.length = function () {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  };\n  /**\r\n   * Returns the Vector4 squared length (float).\r\n   * @returns the length squared\r\n   */\n\n\n  Vector4.prototype.lengthSquared = function () {\n    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n  }; // Methods\n\n  /**\r\n   * Normalizes in place the Vector4.\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.normalize = function () {\n    var len = this.length();\n\n    if (len === 0) {\n      return this;\n    }\n\n    return this.scaleInPlace(1.0 / len);\n  };\n  /**\r\n   * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\r\n   * @returns this converted to a new vector3\r\n   */\n\n\n  Vector4.prototype.toVector3 = function () {\n    return new Vector3(this.x, this.y, this.z);\n  };\n  /**\r\n   * Returns a new Vector4 copied from the current one.\r\n   * @returns the new cloned vector\r\n   */\n\n\n  Vector4.prototype.clone = function () {\n    return new Vector4(this.x, this.y, this.z, this.w);\n  };\n  /**\r\n   * Updates the current Vector4 with the given one coordinates.\r\n   * @param source the source vector to copy from\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.copyFrom = function (source) {\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    this.w = source.w;\n    return this;\n  };\n  /**\r\n   * Updates the current Vector4 coordinates with the given floats.\r\n   * @param x float to copy from\r\n   * @param y float to copy from\r\n   * @param z float to copy from\r\n   * @param w float to copy from\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.copyFromFloats = function (x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  };\n  /**\r\n   * Updates the current Vector4 coordinates with the given floats.\r\n   * @param x float to set from\r\n   * @param y float to set from\r\n   * @param z float to set from\r\n   * @param w float to set from\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.set = function (x, y, z, w) {\n    return this.copyFromFloats(x, y, z, w);\n  };\n  /**\r\n   * Copies the given float to the current Vector3 coordinates\r\n   * @param v defines the x, y, z and w coordinates of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector4.prototype.setAll = function (v) {\n    this.x = this.y = this.z = this.w = v;\n    return this;\n  }; // Statics\n\n  /**\r\n   * Returns a new Vector4 set from the starting index of the given array.\r\n   * @param array the array to pull values from\r\n   * @param offset the offset into the array to start at\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.FromArray = function (array, offset) {\n    if (!offset) {\n      offset = 0;\n    }\n\n    return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n  };\n  /**\r\n   * Updates the given vector \"result\" from the starting index of the given array.\r\n   * @param array the array to pull values from\r\n   * @param offset the offset into the array to start at\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.FromArrayToRef = function (array, offset, result) {\n    result.x = array[offset];\n    result.y = array[offset + 1];\n    result.z = array[offset + 2];\n    result.w = array[offset + 3];\n  };\n  /**\r\n   * Updates the given vector \"result\" from the starting index of the given Float32Array.\r\n   * @param array the array to pull values from\r\n   * @param offset the offset into the array to start at\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.FromFloatArrayToRef = function (array, offset, result) {\n    Vector4.FromArrayToRef(array, offset, result);\n  };\n  /**\r\n   * Updates the given vector \"result\" coordinates from the given floats.\r\n   * @param x float to set from\r\n   * @param y float to set from\r\n   * @param z float to set from\r\n   * @param w float to set from\r\n   * @param result the vector to the floats in\r\n   */\n\n\n  Vector4.FromFloatsToRef = function (x, y, z, w, result) {\n    result.x = x;\n    result.y = y;\n    result.z = z;\n    result.w = w;\n  };\n  /**\r\n   * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.Zero = function () {\n    return new Vector4(0.0, 0.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.One = function () {\n    return new Vector4(1.0, 1.0, 1.0, 1.0);\n  };\n  /**\r\n   * Returns a new normalized Vector4 from the given one.\r\n   * @param vector the vector to normalize\r\n   * @returns the vector\r\n   */\n\n\n  Vector4.Normalize = function (vector) {\n    var result = Vector4.Zero();\n    Vector4.NormalizeToRef(vector, result);\n    return result;\n  };\n  /**\r\n   * Updates the given vector \"result\" from the normalization of the given one.\r\n   * @param vector the vector to normalize\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.NormalizeToRef = function (vector, result) {\n    result.copyFrom(vector);\n    result.normalize();\n  };\n  /**\r\n   * Returns a vector with the minimum values from the left and right vectors\r\n   * @param left left vector to minimize\r\n   * @param right right vector to minimize\r\n   * @returns a new vector with the minimum of the left and right vector values\r\n   */\n\n\n  Vector4.Minimize = function (left, right) {\n    var min = left.clone();\n    min.minimizeInPlace(right);\n    return min;\n  };\n  /**\r\n   * Returns a vector with the maximum values from the left and right vectors\r\n   * @param left left vector to maximize\r\n   * @param right right vector to maximize\r\n   * @returns a new vector with the maximum of the left and right vector values\r\n   */\n\n\n  Vector4.Maximize = function (left, right) {\n    var max = left.clone();\n    max.maximizeInPlace(right);\n    return max;\n  };\n  /**\r\n   * Returns the distance (float) between the vectors \"value1\" and \"value2\".\r\n   * @param value1 value to calulate the distance between\r\n   * @param value2 value to calulate the distance between\r\n   * @return the distance between the two vectors\r\n   */\n\n\n  Vector4.Distance = function (value1, value2) {\n    return Math.sqrt(Vector4.DistanceSquared(value1, value2));\n  };\n  /**\r\n   * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\r\n   * @param value1 value to calulate the distance between\r\n   * @param value2 value to calulate the distance between\r\n   * @return the distance between the two vectors squared\r\n   */\n\n\n  Vector4.DistanceSquared = function (value1, value2) {\n    var x = value1.x - value2.x;\n    var y = value1.y - value2.y;\n    var z = value1.z - value2.z;\n    var w = value1.w - value2.w;\n    return x * x + y * y + z * z + w * w;\n  };\n  /**\r\n   * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\r\n   * @param value1 value to calulate the center between\r\n   * @param value2 value to calulate the center between\r\n   * @return the center between the two vectors\r\n   */\n\n\n  Vector4.Center = function (value1, value2) {\n    var center = value1.add(value2);\n    center.scaleInPlace(0.5);\n    return center;\n  };\n  /**\r\n   * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\r\n   * This methods computes transformed normalized direction vectors only.\r\n   * @param vector the vector to transform\r\n   * @param transformation the transformation matrix to apply\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.TransformNormal = function (vector, transformation) {\n    var result = Vector4.Zero();\n    Vector4.TransformNormalToRef(vector, transformation, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector.\r\n   * This methods computes transformed normalized direction vectors only.\r\n   * @param vector the vector to transform\r\n   * @param transformation the transformation matrix to apply\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.TransformNormalToRef = function (vector, transformation, result) {\n    var m = transformation.m;\n    var x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];\n    var y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];\n    var z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];\n    result.x = x;\n    result.y = y;\n    result.z = z;\n    result.w = vector.w;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\r\n   * This methods computes transformed normalized direction vectors only.\r\n   * @param x value to transform\r\n   * @param y value to transform\r\n   * @param z value to transform\r\n   * @param w value to transform\r\n   * @param transformation the transformation matrix to apply\r\n   * @param result the vector to store the results in\r\n   */\n\n\n  Vector4.TransformNormalFromFloatsToRef = function (x, y, z, w, transformation, result) {\n    var m = transformation.m;\n    result.x = x * m[0] + y * m[4] + z * m[8];\n    result.y = x * m[1] + y * m[5] + z * m[9];\n    result.z = x * m[2] + y * m[6] + z * m[10];\n    result.w = w;\n  };\n  /**\r\n   * Creates a new Vector4 from a Vector3\r\n   * @param source defines the source data\r\n   * @param w defines the 4th component (default is 0)\r\n   * @returns a new Vector4\r\n   */\n\n\n  Vector4.FromVector3 = function (source, w) {\n    if (w === void 0) {\n      w = 0;\n    }\n\n    return new Vector4(source.x, source.y, source.z, w);\n  };\n\n  return Vector4;\n}();\n\nexport { Vector4 };\n/**\r\n * Class used to store quaternion data\r\n * @see https://en.wikipedia.org/wiki/Quaternion\r\n * @see http://doc.babylonjs.com/features/position,_rotation,_scaling\r\n */\n\nvar Quaternion =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Quaternion from the given floats\r\n   * @param x defines the first component (0 by default)\r\n   * @param y defines the second component (0 by default)\r\n   * @param z defines the third component (0 by default)\r\n   * @param w defines the fourth component (1.0 by default)\r\n   */\n  function Quaternion(\n  /** defines the first component (0 by default) */\n  x,\n  /** defines the second component (0 by default) */\n  y,\n  /** defines the third component (0 by default) */\n  z,\n  /** defines the fourth component (1.0 by default) */\n  w) {\n    if (x === void 0) {\n      x = 0.0;\n    }\n\n    if (y === void 0) {\n      y = 0.0;\n    }\n\n    if (z === void 0) {\n      z = 0.0;\n    }\n\n    if (w === void 0) {\n      w = 1.0;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\r\n   * Gets a string representation for the current quaternion\r\n   * @returns a string with the Quaternion coordinates\r\n   */\n\n\n  Quaternion.prototype.toString = function () {\n    return \"{X: \" + this.x + \" Y:\" + this.y + \" Z:\" + this.z + \" W:\" + this.w + \"}\";\n  };\n  /**\r\n   * Gets the class name of the quaternion\r\n   * @returns the string \"Quaternion\"\r\n   */\n\n\n  Quaternion.prototype.getClassName = function () {\n    return \"Quaternion\";\n  };\n  /**\r\n   * Gets a hash code for this quaternion\r\n   * @returns the quaternion hash code\r\n   */\n\n\n  Quaternion.prototype.getHashCode = function () {\n    var hash = this.x | 0;\n    hash = hash * 397 ^ (this.y | 0);\n    hash = hash * 397 ^ (this.z | 0);\n    hash = hash * 397 ^ (this.w | 0);\n    return hash;\n  };\n  /**\r\n   * Copy the quaternion to an array\r\n   * @returns a new array populated with 4 elements from the quaternion coordinates\r\n   */\n\n\n  Quaternion.prototype.asArray = function () {\n    return [this.x, this.y, this.z, this.w];\n  };\n  /**\r\n   * Check if two quaternions are equals\r\n   * @param otherQuaternion defines the second operand\r\n   * @return true if the current quaternion and the given one coordinates are strictly equals\r\n   */\n\n\n  Quaternion.prototype.equals = function (otherQuaternion) {\n    return otherQuaternion && this.x === otherQuaternion.x && this.y === otherQuaternion.y && this.z === otherQuaternion.z && this.w === otherQuaternion.w;\n  };\n  /**\r\n   * Gets a boolean if two quaternions are equals (using an epsilon value)\r\n   * @param otherQuaternion defines the other quaternion\r\n   * @param epsilon defines the minimal distance to consider equality\r\n   * @returns true if the given quaternion coordinates are close to the current ones by a distance of epsilon.\r\n   */\n\n\n  Quaternion.prototype.equalsWithEpsilon = function (otherQuaternion, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherQuaternion && Scalar.WithinEpsilon(this.x, otherQuaternion.x, epsilon) && Scalar.WithinEpsilon(this.y, otherQuaternion.y, epsilon) && Scalar.WithinEpsilon(this.z, otherQuaternion.z, epsilon) && Scalar.WithinEpsilon(this.w, otherQuaternion.w, epsilon);\n  };\n  /**\r\n   * Clone the current quaternion\r\n   * @returns a new quaternion copied from the current one\r\n   */\n\n\n  Quaternion.prototype.clone = function () {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  };\n  /**\r\n   * Copy a quaternion to the current one\r\n   * @param other defines the other quaternion\r\n   * @returns the updated current quaternion\r\n   */\n\n\n  Quaternion.prototype.copyFrom = function (other) {\n    this.x = other.x;\n    this.y = other.y;\n    this.z = other.z;\n    this.w = other.w;\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion with the given float coordinates\r\n   * @param x defines the x coordinate\r\n   * @param y defines the y coordinate\r\n   * @param z defines the z coordinate\r\n   * @param w defines the w coordinate\r\n   * @returns the updated current quaternion\r\n   */\n\n\n  Quaternion.prototype.copyFromFloats = function (x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion from the given float coordinates\r\n   * @param x defines the x coordinate\r\n   * @param y defines the y coordinate\r\n   * @param z defines the z coordinate\r\n   * @param w defines the w coordinate\r\n   * @returns the updated current quaternion\r\n   */\n\n\n  Quaternion.prototype.set = function (x, y, z, w) {\n    return this.copyFromFloats(x, y, z, w);\n  };\n  /**\r\n   * Adds two quaternions\r\n   * @param other defines the second operand\r\n   * @returns a new quaternion as the addition result of the given one and the current quaternion\r\n   */\n\n\n  Quaternion.prototype.add = function (other) {\n    return new Quaternion(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);\n  };\n  /**\r\n   * Add a quaternion to the current one\r\n   * @param other defines the quaternion to add\r\n   * @returns the current quaternion\r\n   */\n\n\n  Quaternion.prototype.addInPlace = function (other) {\n    this.x += other.x;\n    this.y += other.y;\n    this.z += other.z;\n    this.w += other.w;\n    return this;\n  };\n  /**\r\n   * Subtract two quaternions\r\n   * @param other defines the second operand\r\n   * @returns a new quaternion as the subtraction result of the given one from the current one\r\n   */\n\n\n  Quaternion.prototype.subtract = function (other) {\n    return new Quaternion(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);\n  };\n  /**\r\n   * Multiplies the current quaternion by a scale factor\r\n   * @param value defines the scale factor\r\n   * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\r\n   */\n\n\n  Quaternion.prototype.scale = function (value) {\n    return new Quaternion(this.x * value, this.y * value, this.z * value, this.w * value);\n  };\n  /**\r\n   * Scale the current quaternion values by a factor and stores the result to a given quaternion\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Quaternion object where to store the result\r\n   * @returns the unmodified current quaternion\r\n   */\n\n\n  Quaternion.prototype.scaleToRef = function (scale, result) {\n    result.x = this.x * scale;\n    result.y = this.y * scale;\n    result.z = this.z * scale;\n    result.w = this.w * scale;\n    return this;\n  };\n  /**\r\n   * Multiplies in place the current quaternion by a scale factor\r\n   * @param value defines the scale factor\r\n   * @returns the current modified quaternion\r\n   */\n\n\n  Quaternion.prototype.scaleInPlace = function (value) {\n    this.x *= value;\n    this.y *= value;\n    this.z *= value;\n    this.w *= value;\n    return this;\n  };\n  /**\r\n   * Scale the current quaternion values by a factor and add the result to a given quaternion\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Quaternion object where to store the result\r\n   * @returns the unmodified current quaternion\r\n   */\n\n\n  Quaternion.prototype.scaleAndAddToRef = function (scale, result) {\n    result.x += this.x * scale;\n    result.y += this.y * scale;\n    result.z += this.z * scale;\n    result.w += this.w * scale;\n    return this;\n  };\n  /**\r\n   * Multiplies two quaternions\r\n   * @param q1 defines the second operand\r\n   * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\r\n   */\n\n\n  Quaternion.prototype.multiply = function (q1) {\n    var result = new Quaternion(0, 0, 0, 1.0);\n    this.multiplyToRef(q1, result);\n    return result;\n  };\n  /**\r\n   * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\r\n   * @param q1 defines the second operand\r\n   * @param result defines the target quaternion\r\n   * @returns the current quaternion\r\n   */\n\n\n  Quaternion.prototype.multiplyToRef = function (q1, result) {\n    var x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;\n    var y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;\n    var z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;\n    var w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;\n    result.copyFromFloats(x, y, z, w);\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\r\n   * @param q1 defines the second operand\r\n   * @returns the currentupdated quaternion\r\n   */\n\n\n  Quaternion.prototype.multiplyInPlace = function (q1) {\n    this.multiplyToRef(q1, this);\n    return this;\n  };\n  /**\r\n   * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\r\n   * @param ref defines the target quaternion\r\n   * @returns the current quaternion\r\n   */\n\n\n  Quaternion.prototype.conjugateToRef = function (ref) {\n    ref.copyFromFloats(-this.x, -this.y, -this.z, this.w);\n    return this;\n  };\n  /**\r\n   * Conjugates in place (1-q) the current quaternion\r\n   * @returns the current updated quaternion\r\n   */\n\n\n  Quaternion.prototype.conjugateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n    return this;\n  };\n  /**\r\n   * Conjugates in place (1-q) the current quaternion\r\n   * @returns a new quaternion\r\n   */\n\n\n  Quaternion.prototype.conjugate = function () {\n    var result = new Quaternion(-this.x, -this.y, -this.z, this.w);\n    return result;\n  };\n  /**\r\n   * Gets length of current quaternion\r\n   * @returns the quaternion length (float)\r\n   */\n\n\n  Quaternion.prototype.length = function () {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  };\n  /**\r\n   * Normalize in place the current quaternion\r\n   * @returns the current updated quaternion\r\n   */\n\n\n  Quaternion.prototype.normalize = function () {\n    var len = this.length();\n\n    if (len === 0) {\n      return this;\n    }\n\n    var inv = 1.0 / len;\n    this.x *= inv;\n    this.y *= inv;\n    this.z *= inv;\n    this.w *= inv;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3 set with the Euler angles translated from the current quaternion\r\n   * @param order is a reserved parameter and is ignore for now\r\n   * @returns a new Vector3 containing the Euler angles\r\n   */\n\n\n  Quaternion.prototype.toEulerAngles = function (order) {\n    if (order === void 0) {\n      order = \"YZX\";\n    }\n\n    var result = Vector3.Zero();\n    this.toEulerAnglesToRef(result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector3 \"result\" with the Euler angles translated from the current quaternion\r\n   * @param result defines the vector which will be filled with the Euler angles\r\n   * @param order is a reserved parameter and is ignore for now\r\n   * @returns the current unchanged quaternion\r\n   */\n\n\n  Quaternion.prototype.toEulerAnglesToRef = function (result) {\n    var qz = this.z;\n    var qx = this.x;\n    var qy = this.y;\n    var qw = this.w;\n    var sqw = qw * qw;\n    var sqz = qz * qz;\n    var sqx = qx * qx;\n    var sqy = qy * qy;\n    var zAxisY = qy * qz - qx * qw;\n    var limit = .4999999;\n\n    if (zAxisY < -limit) {\n      result.y = 2 * Math.atan2(qy, qw);\n      result.x = Math.PI / 2;\n      result.z = 0;\n    } else if (zAxisY > limit) {\n      result.y = 2 * Math.atan2(qy, qw);\n      result.x = -Math.PI / 2;\n      result.z = 0;\n    } else {\n      result.z = Math.atan2(2.0 * (qx * qy + qz * qw), -sqz - sqx + sqy + sqw);\n      result.x = Math.asin(-2.0 * (qz * qy - qx * qw));\n      result.y = Math.atan2(2.0 * (qz * qx + qy * qw), sqz - sqx - sqy + sqw);\n    }\n\n    return this;\n  };\n  /**\r\n   * Updates the given rotation matrix with the current quaternion values\r\n   * @param result defines the target matrix\r\n   * @returns the current unchanged quaternion\r\n   */\n\n\n  Quaternion.prototype.toRotationMatrix = function (result) {\n    Matrix.FromQuaternionToRef(this, result);\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion from the given rotation matrix values\r\n   * @param matrix defines the source matrix\r\n   * @returns the current updated quaternion\r\n   */\n\n\n  Quaternion.prototype.fromRotationMatrix = function (matrix) {\n    Quaternion.FromRotationMatrixToRef(matrix, this);\n    return this;\n  }; // Statics\n\n  /**\r\n   * Creates a new quaternion from a rotation matrix\r\n   * @param matrix defines the source matrix\r\n   * @returns a new quaternion created from the given rotation matrix values\r\n   */\n\n\n  Quaternion.FromRotationMatrix = function (matrix) {\n    var result = new Quaternion();\n    Quaternion.FromRotationMatrixToRef(matrix, result);\n    return result;\n  };\n  /**\r\n   * Updates the given quaternion with the given rotation matrix values\r\n   * @param matrix defines the source matrix\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.FromRotationMatrixToRef = function (matrix, result) {\n    var data = matrix.m;\n    var m11 = data[0],\n        m12 = data[4],\n        m13 = data[8];\n    var m21 = data[1],\n        m22 = data[5],\n        m23 = data[9];\n    var m31 = data[2],\n        m32 = data[6],\n        m33 = data[10];\n    var trace = m11 + m22 + m33;\n    var s;\n\n    if (trace > 0) {\n      s = 0.5 / Math.sqrt(trace + 1.0);\n      result.w = 0.25 / s;\n      result.x = (m32 - m23) * s;\n      result.y = (m13 - m31) * s;\n      result.z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      result.w = (m32 - m23) / s;\n      result.x = 0.25 * s;\n      result.y = (m12 + m21) / s;\n      result.z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      result.w = (m13 - m31) / s;\n      result.x = (m12 + m21) / s;\n      result.y = 0.25 * s;\n      result.z = (m23 + m32) / s;\n    } else {\n      s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      result.w = (m21 - m12) / s;\n      result.x = (m13 + m31) / s;\n      result.y = (m23 + m32) / s;\n      result.z = 0.25 * s;\n    }\n  };\n  /**\r\n   * Returns the dot product (float) between the quaternions \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @returns the dot product\r\n   */\n\n\n  Quaternion.Dot = function (left, right) {\n    return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n  };\n  /**\r\n   * Checks if the two quaternions are close to each other\r\n   * @param quat0 defines the first quaternion to check\r\n   * @param quat1 defines the second quaternion to check\r\n   * @returns true if the two quaternions are close to each other\r\n   */\n\n\n  Quaternion.AreClose = function (quat0, quat1) {\n    var dot = Quaternion.Dot(quat0, quat1);\n    return dot >= 0;\n  };\n  /**\r\n   * Creates an empty quaternion\r\n   * @returns a new quaternion set to (0.0, 0.0, 0.0)\r\n   */\n\n\n  Quaternion.Zero = function () {\n    return new Quaternion(0.0, 0.0, 0.0, 0.0);\n  };\n  /**\r\n   * Inverse a given quaternion\r\n   * @param q defines the source quaternion\r\n   * @returns a new quaternion as the inverted current quaternion\r\n   */\n\n\n  Quaternion.Inverse = function (q) {\n    return new Quaternion(-q.x, -q.y, -q.z, q.w);\n  };\n  /**\r\n   * Inverse a given quaternion\r\n   * @param q defines the source quaternion\r\n   * @param result the quaternion the result will be stored in\r\n   * @returns the result quaternion\r\n   */\n\n\n  Quaternion.InverseToRef = function (q, result) {\n    result.set(-q.x, -q.y, -q.z, q.w);\n    return result;\n  };\n  /**\r\n   * Creates an identity quaternion\r\n   * @returns the identity quaternion\r\n   */\n\n\n  Quaternion.Identity = function () {\n    return new Quaternion(0.0, 0.0, 0.0, 1.0);\n  };\n  /**\r\n   * Gets a boolean indicating if the given quaternion is identity\r\n   * @param quaternion defines the quaternion to check\r\n   * @returns true if the quaternion is identity\r\n   */\n\n\n  Quaternion.IsIdentity = function (quaternion) {\n    return quaternion && quaternion.x === 0 && quaternion.y === 0 && quaternion.z === 0 && quaternion.w === 1;\n  };\n  /**\r\n   * Creates a quaternion from a rotation around an axis\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle to use\r\n   * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\r\n   */\n\n\n  Quaternion.RotationAxis = function (axis, angle) {\n    return Quaternion.RotationAxisToRef(axis, angle, new Quaternion());\n  };\n  /**\r\n   * Creates a rotation around an axis and stores it into the given quaternion\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle to use\r\n   * @param result defines the target quaternion\r\n   * @returns the target quaternion\r\n   */\n\n\n  Quaternion.RotationAxisToRef = function (axis, angle, result) {\n    var sin = Math.sin(angle / 2);\n    axis.normalize();\n    result.w = Math.cos(angle / 2);\n    result.x = axis.x * sin;\n    result.y = axis.y * sin;\n    result.z = axis.z * sin;\n    return result;\n  };\n  /**\r\n   * Creates a new quaternion from data stored into an array\r\n   * @param array defines the data source\r\n   * @param offset defines the offset in the source array where the data starts\r\n   * @returns a new quaternion\r\n   */\n\n\n  Quaternion.FromArray = function (array, offset) {\n    if (!offset) {\n      offset = 0;\n    }\n\n    return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n  };\n  /**\r\n   * Create a quaternion from Euler rotation angles\r\n   * @param x Pitch\r\n   * @param y Yaw\r\n   * @param z Roll\r\n   * @returns the new Quaternion\r\n   */\n\n\n  Quaternion.FromEulerAngles = function (x, y, z) {\n    var q = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(y, x, z, q);\n    return q;\n  };\n  /**\r\n   * Updates a quaternion from Euler rotation angles\r\n   * @param x Pitch\r\n   * @param y Yaw\r\n   * @param z Roll\r\n   * @param result the quaternion to store the result\r\n   * @returns the updated quaternion\r\n   */\n\n\n  Quaternion.FromEulerAnglesToRef = function (x, y, z, result) {\n    Quaternion.RotationYawPitchRollToRef(y, x, z, result);\n    return result;\n  };\n  /**\r\n   * Create a quaternion from Euler rotation vector\r\n   * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\r\n   * @returns the new Quaternion\r\n   */\n\n\n  Quaternion.FromEulerVector = function (vec) {\n    var q = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(vec.y, vec.x, vec.z, q);\n    return q;\n  };\n  /**\r\n   * Updates a quaternion from Euler rotation vector\r\n   * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\r\n   * @param result the quaternion to store the result\r\n   * @returns the updated quaternion\r\n   */\n\n\n  Quaternion.FromEulerVectorToRef = function (vec, result) {\n    Quaternion.RotationYawPitchRollToRef(vec.y, vec.x, vec.z, result);\n    return result;\n  };\n  /**\r\n   * Creates a new quaternion from the given Euler float angles (y, x, z)\r\n   * @param yaw defines the rotation around Y axis\r\n   * @param pitch defines the rotation around X axis\r\n   * @param roll defines the rotation around Z axis\r\n   * @returns the new quaternion\r\n   */\n\n\n  Quaternion.RotationYawPitchRoll = function (yaw, pitch, roll) {\n    var q = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\n    return q;\n  };\n  /**\r\n   * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\r\n   * @param yaw defines the rotation around Y axis\r\n   * @param pitch defines the rotation around X axis\r\n   * @param roll defines the rotation around Z axis\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\n    // Produces a quaternion from Euler angles in the z-y-x orientation (Tait-Bryan angles)\n    var halfRoll = roll * 0.5;\n    var halfPitch = pitch * 0.5;\n    var halfYaw = yaw * 0.5;\n    var sinRoll = Math.sin(halfRoll);\n    var cosRoll = Math.cos(halfRoll);\n    var sinPitch = Math.sin(halfPitch);\n    var cosPitch = Math.cos(halfPitch);\n    var sinYaw = Math.sin(halfYaw);\n    var cosYaw = Math.cos(halfYaw);\n    result.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    result.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    result.z = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;\n    result.w = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;\n  };\n  /**\r\n   * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\r\n   * @param alpha defines the rotation around first axis\r\n   * @param beta defines the rotation around second axis\r\n   * @param gamma defines the rotation around third axis\r\n   * @returns the new quaternion\r\n   */\n\n\n  Quaternion.RotationAlphaBetaGamma = function (alpha, beta, gamma) {\n    var result = new Quaternion();\n    Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\n    return result;\n  };\n  /**\r\n   * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\r\n   * @param alpha defines the rotation around first axis\r\n   * @param beta defines the rotation around second axis\r\n   * @param gamma defines the rotation around third axis\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.RotationAlphaBetaGammaToRef = function (alpha, beta, gamma, result) {\n    // Produces a quaternion from Euler angles in the z-x-z orientation\n    var halfGammaPlusAlpha = (gamma + alpha) * 0.5;\n    var halfGammaMinusAlpha = (gamma - alpha) * 0.5;\n    var halfBeta = beta * 0.5;\n    result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\n    result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\n    result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\n    result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\n  };\n  /**\r\n   * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @returns the new quaternion\r\n   */\n\n\n  Quaternion.RotationQuaternionFromAxis = function (axis1, axis2, axis3) {\n    var quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\n    Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n    return quat;\n  };\n  /**\r\n   * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @param ref defines the target quaternion\r\n   */\n\n\n  Quaternion.RotationQuaternionFromAxisToRef = function (axis1, axis2, axis3, ref) {\n    var rotMat = MathTmp.Matrix[0];\n    Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\n    Quaternion.FromRotationMatrixToRef(rotMat, ref);\n  };\n  /**\r\n   * Interpolates between two quaternions\r\n   * @param left defines first quaternion\r\n   * @param right defines second quaternion\r\n   * @param amount defines the gradient to use\r\n   * @returns the new interpolated quaternion\r\n   */\n\n\n  Quaternion.Slerp = function (left, right, amount) {\n    var result = Quaternion.Identity();\n    Quaternion.SlerpToRef(left, right, amount, result);\n    return result;\n  };\n  /**\r\n   * Interpolates between two quaternions and stores it into a target quaternion\r\n   * @param left defines first quaternion\r\n   * @param right defines second quaternion\r\n   * @param amount defines the gradient to use\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.SlerpToRef = function (left, right, amount, result) {\n    var num2;\n    var num3;\n    var num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n    var flag = false;\n\n    if (num4 < 0) {\n      flag = true;\n      num4 = -num4;\n    }\n\n    if (num4 > 0.999999) {\n      num3 = 1 - amount;\n      num2 = flag ? -amount : amount;\n    } else {\n      var num5 = Math.acos(num4);\n      var num6 = 1.0 / Math.sin(num5);\n      num3 = Math.sin((1.0 - amount) * num5) * num6;\n      num2 = flag ? -Math.sin(amount * num5) * num6 : Math.sin(amount * num5) * num6;\n    }\n\n    result.x = num3 * left.x + num2 * right.x;\n    result.y = num3 * left.y + num2 * right.y;\n    result.z = num3 * left.z + num2 * right.z;\n    result.w = num3 * left.w + num2 * right.w;\n  };\n  /**\r\n   * Interpolate between two quaternions using Hermite interpolation\r\n   * @param value1 defines first quaternion\r\n   * @param tangent1 defines the incoming tangent\r\n   * @param value2 defines second quaternion\r\n   * @param tangent2 defines the outgoing tangent\r\n   * @param amount defines the target quaternion\r\n   * @returns the new interpolated quaternion\r\n   */\n\n\n  Quaternion.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n    var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n    var z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;\n    var w = value1.w * part1 + value2.w * part2 + tangent1.w * part3 + tangent2.w * part4;\n    return new Quaternion(x, y, z, w);\n  };\n\n  return Quaternion;\n}();\n\nexport { Quaternion };\n/**\r\n * Class used to store matrix data (4x4)\r\n */\n\nvar Matrix =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an empty matrix (filled with zeros)\r\n   */\n  function Matrix() {\n    this._isIdentity = false;\n    this._isIdentityDirty = true;\n    this._isIdentity3x2 = true;\n    this._isIdentity3x2Dirty = true;\n    /**\r\n     * Gets the update flag of the matrix which is an unique number for the matrix.\r\n     * It will be incremented every time the matrix data change.\r\n     * You can use it to speed the comparison between two versions of the same matrix.\r\n     */\n\n    this.updateFlag = -1;\n    this._m = new Float32Array(16);\n\n    this._updateIdentityStatus(false);\n  }\n\n  Object.defineProperty(Matrix.prototype, \"m\", {\n    /**\r\n     * Gets the internal data of the matrix\r\n     */\n    get: function get() {\n      return this._m;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @hidden */\n\n  Matrix.prototype._markAsUpdated = function () {\n    this.updateFlag = Matrix._updateFlagSeed++;\n    this._isIdentity = false;\n    this._isIdentity3x2 = false;\n    this._isIdentityDirty = true;\n    this._isIdentity3x2Dirty = true;\n  };\n  /** @hidden */\n\n\n  Matrix.prototype._updateIdentityStatus = function (isIdentity, isIdentityDirty, isIdentity3x2, isIdentity3x2Dirty) {\n    if (isIdentityDirty === void 0) {\n      isIdentityDirty = false;\n    }\n\n    if (isIdentity3x2 === void 0) {\n      isIdentity3x2 = false;\n    }\n\n    if (isIdentity3x2Dirty === void 0) {\n      isIdentity3x2Dirty = true;\n    }\n\n    this.updateFlag = Matrix._updateFlagSeed++;\n    this._isIdentity = isIdentity;\n    this._isIdentity3x2 = isIdentity || isIdentity3x2;\n    this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\n    this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\n  }; // Properties\n\n  /**\r\n   * Check if the current matrix is identity\r\n   * @returns true is the matrix is the identity matrix\r\n   */\n\n\n  Matrix.prototype.isIdentity = function () {\n    if (this._isIdentityDirty) {\n      this._isIdentityDirty = false;\n      var m = this._m;\n      this._isIdentity = m[0] === 1.0 && m[1] === 0.0 && m[2] === 0.0 && m[3] === 0.0 && m[4] === 0.0 && m[5] === 1.0 && m[6] === 0.0 && m[7] === 0.0 && m[8] === 0.0 && m[9] === 0.0 && m[10] === 1.0 && m[11] === 0.0 && m[12] === 0.0 && m[13] === 0.0 && m[14] === 0.0 && m[15] === 1.0;\n    }\n\n    return this._isIdentity;\n  };\n  /**\r\n   * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\r\n   * @returns true is the matrix is the identity matrix\r\n   */\n\n\n  Matrix.prototype.isIdentityAs3x2 = function () {\n    if (this._isIdentity3x2Dirty) {\n      this._isIdentity3x2Dirty = false;\n\n      if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\n        this._isIdentity3x2 = false;\n      } else if (this._m[1] !== 0.0 || this._m[2] !== 0.0 || this._m[3] !== 0.0 || this._m[4] !== 0.0 || this._m[6] !== 0.0 || this._m[7] !== 0.0 || this._m[8] !== 0.0 || this._m[9] !== 0.0 || this._m[10] !== 0.0 || this._m[11] !== 0.0 || this._m[12] !== 0.0 || this._m[13] !== 0.0 || this._m[14] !== 0.0) {\n        this._isIdentity3x2 = false;\n      } else {\n        this._isIdentity3x2 = true;\n      }\n    }\n\n    return this._isIdentity3x2;\n  };\n  /**\r\n   * Gets the determinant of the matrix\r\n   * @returns the matrix determinant\r\n   */\n\n\n  Matrix.prototype.determinant = function () {\n    if (this._isIdentity === true) {\n      return 1;\n    }\n\n    var m = this._m;\n    var m00 = m[0],\n        m01 = m[1],\n        m02 = m[2],\n        m03 = m[3];\n    var m10 = m[4],\n        m11 = m[5],\n        m12 = m[6],\n        m13 = m[7];\n    var m20 = m[8],\n        m21 = m[9],\n        m22 = m[10],\n        m23 = m[11];\n    var m30 = m[12],\n        m31 = m[13],\n        m32 = m[14],\n        m33 = m[15]; // https://en.wikipedia.org/wiki/Laplace_expansion\n    // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n    // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n    // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n    // where\n    //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n    //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n    //\n    // Here we do that for the 1st row.\n\n    var det_22_33 = m22 * m33 - m32 * m23;\n    var det_21_33 = m21 * m33 - m31 * m23;\n    var det_21_32 = m21 * m32 - m31 * m22;\n    var det_20_33 = m20 * m33 - m30 * m23;\n    var det_20_32 = m20 * m32 - m22 * m30;\n    var det_20_31 = m20 * m31 - m30 * m21;\n    var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n    var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n    var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n    var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n    return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n  }; // Methods\n\n  /**\r\n   * Returns the matrix as a Float32Array\r\n   * @returns the matrix underlying array\r\n   */\n\n\n  Matrix.prototype.toArray = function () {\n    return this._m;\n  };\n  /**\r\n   * Returns the matrix as a Float32Array\r\n  * @returns the matrix underlying array.\r\n  */\n\n\n  Matrix.prototype.asArray = function () {\n    return this._m;\n  };\n  /**\r\n   * Inverts the current matrix in place\r\n   * @returns the current inverted matrix\r\n   */\n\n\n  Matrix.prototype.invert = function () {\n    this.invertToRef(this);\n    return this;\n  };\n  /**\r\n   * Sets all the matrix elements to zero\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.reset = function () {\n    Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);\n\n    this._updateIdentityStatus(false);\n\n    return this;\n  };\n  /**\r\n   * Adds the current matrix with a second one\r\n   * @param other defines the matrix to add\r\n   * @returns a new matrix as the addition of the current matrix and the given one\r\n   */\n\n\n  Matrix.prototype.add = function (other) {\n    var result = new Matrix();\n    this.addToRef(other, result);\n    return result;\n  };\n  /**\r\n   * Sets the given matrix \"result\" to the addition of the current matrix and the given one\r\n   * @param other defines the matrix to add\r\n   * @param result defines the target matrix\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.addToRef = function (other, result) {\n    var m = this._m;\n    var resultM = result._m;\n    var otherM = other.m;\n\n    for (var index = 0; index < 16; index++) {\n      resultM[index] = m[index] + otherM[index];\n    }\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Adds in place the given matrix to the current matrix\r\n   * @param other defines the second operand\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.addToSelf = function (other) {\n    var m = this._m;\n    var otherM = other.m;\n\n    for (var index = 0; index < 16; index++) {\n      m[index] += otherM[index];\n    }\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Sets the given matrix to the current inverted Matrix\r\n   * @param other defines the target matrix\r\n   * @returns the unmodified current matrix\r\n   */\n\n\n  Matrix.prototype.invertToRef = function (other) {\n    if (this._isIdentity === true) {\n      Matrix.IdentityToRef(other);\n      return this;\n    } // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n\n\n    var m = this._m;\n    var m00 = m[0],\n        m01 = m[1],\n        m02 = m[2],\n        m03 = m[3];\n    var m10 = m[4],\n        m11 = m[5],\n        m12 = m[6],\n        m13 = m[7];\n    var m20 = m[8],\n        m21 = m[9],\n        m22 = m[10],\n        m23 = m[11];\n    var m30 = m[12],\n        m31 = m[13],\n        m32 = m[14],\n        m33 = m[15];\n    var det_22_33 = m22 * m33 - m32 * m23;\n    var det_21_33 = m21 * m33 - m31 * m23;\n    var det_21_32 = m21 * m32 - m31 * m22;\n    var det_20_33 = m20 * m33 - m30 * m23;\n    var det_20_32 = m20 * m32 - m22 * m30;\n    var det_20_31 = m20 * m31 - m30 * m21;\n    var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n    var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n    var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n    var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n    var det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n\n    if (det === 0) {\n      // not invertible\n      other.copyFrom(this);\n      return this;\n    }\n\n    var detInv = 1 / det;\n    var det_12_33 = m12 * m33 - m32 * m13;\n    var det_11_33 = m11 * m33 - m31 * m13;\n    var det_11_32 = m11 * m32 - m31 * m12;\n    var det_10_33 = m10 * m33 - m30 * m13;\n    var det_10_32 = m10 * m32 - m30 * m12;\n    var det_10_31 = m10 * m31 - m30 * m11;\n    var det_12_23 = m12 * m23 - m22 * m13;\n    var det_11_23 = m11 * m23 - m21 * m13;\n    var det_11_22 = m11 * m22 - m21 * m12;\n    var det_10_23 = m10 * m23 - m20 * m13;\n    var det_10_22 = m10 * m22 - m20 * m12;\n    var det_10_21 = m10 * m21 - m20 * m11;\n    var cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\n    var cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\n    var cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\n    var cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\n    var cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\n    var cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\n    var cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\n    var cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\n    var cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\n    var cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\n    var cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\n    var cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\n    Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);\n    return this;\n  };\n  /**\r\n   * add a value at the specified position in the current Matrix\r\n   * @param index the index of the value within the matrix. between 0 and 15.\r\n   * @param value the value to be added\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.addAtIndex = function (index, value) {\n    this._m[index] += value;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * mutiply the specified position in the current Matrix by a value\r\n   * @param index the index of the value within the matrix. between 0 and 15.\r\n   * @param value the value to be added\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.multiplyAtIndex = function (index, value) {\n    this._m[index] *= value;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Inserts the translation vector (using 3 floats) in the current matrix\r\n   * @param x defines the 1st component of the translation\r\n   * @param y defines the 2nd component of the translation\r\n   * @param z defines the 3rd component of the translation\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.setTranslationFromFloats = function (x, y, z) {\n    this._m[12] = x;\n    this._m[13] = y;\n    this._m[14] = z;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Adds the translation vector (using 3 floats) in the current matrix\r\n   * @param x defines the 1st component of the translation\r\n   * @param y defines the 2nd component of the translation\r\n   * @param z defines the 3rd component of the translation\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.addTranslationFromFloats = function (x, y, z) {\n    this._m[12] += x;\n    this._m[13] += y;\n    this._m[14] += z;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Inserts the translation vector in the current matrix\r\n   * @param vector3 defines the translation to insert\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.setTranslation = function (vector3) {\n    return this.setTranslationFromFloats(vector3.x, vector3.y, vector3.z);\n  };\n  /**\r\n   * Gets the translation value of the current matrix\r\n   * @returns a new Vector3 as the extracted translation from the matrix\r\n   */\n\n\n  Matrix.prototype.getTranslation = function () {\n    return new Vector3(this._m[12], this._m[13], this._m[14]);\n  };\n  /**\r\n   * Fill a Vector3 with the extracted translation from the matrix\r\n   * @param result defines the Vector3 where to store the translation\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.getTranslationToRef = function (result) {\n    result.x = this._m[12];\n    result.y = this._m[13];\n    result.z = this._m[14];\n    return this;\n  };\n  /**\r\n   * Remove rotation and scaling part from the matrix\r\n   * @returns the updated matrix\r\n   */\n\n\n  Matrix.prototype.removeRotationAndScaling = function () {\n    var m = this.m;\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);\n\n    this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\n\n    return this;\n  };\n  /**\r\n   * Multiply two matrices\r\n   * @param other defines the second operand\r\n   * @returns a new matrix set with the multiplication result of the current Matrix and the given one\r\n   */\n\n\n  Matrix.prototype.multiply = function (other) {\n    var result = new Matrix();\n    this.multiplyToRef(other, result);\n    return result;\n  };\n  /**\r\n   * Copy the current matrix from the given one\r\n   * @param other defines the source matrix\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.copyFrom = function (other) {\n    other.copyToArray(this._m);\n    var o = other;\n\n    this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\n\n    return this;\n  };\n  /**\r\n   * Populates the given array from the starting index with the current matrix values\r\n   * @param array defines the target array\r\n   * @param offset defines the offset in the target array where to start storing values\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.copyToArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    var source = this._m;\n    array[offset] = source[0];\n    array[offset + 1] = source[1];\n    array[offset + 2] = source[2];\n    array[offset + 3] = source[3];\n    array[offset + 4] = source[4];\n    array[offset + 5] = source[5];\n    array[offset + 6] = source[6];\n    array[offset + 7] = source[7];\n    array[offset + 8] = source[8];\n    array[offset + 9] = source[9];\n    array[offset + 10] = source[10];\n    array[offset + 11] = source[11];\n    array[offset + 12] = source[12];\n    array[offset + 13] = source[13];\n    array[offset + 14] = source[14];\n    array[offset + 15] = source[15];\n    return this;\n  };\n  /**\r\n   * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\r\n   * @param other defines the second operand\r\n   * @param result defines the matrix where to store the multiplication\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.multiplyToRef = function (other, result) {\n    if (this._isIdentity) {\n      result.copyFrom(other);\n      return this;\n    }\n\n    if (other._isIdentity) {\n      result.copyFrom(this);\n      return this;\n    }\n\n    this.multiplyToArray(other, result._m, 0);\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Sets the Float32Array \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\r\n   * @param other defines the second operand\r\n   * @param result defines the array where to store the multiplication\r\n   * @param offset defines the offset in the target array where to start storing values\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.multiplyToArray = function (other, result, offset) {\n    var m = this._m;\n    var otherM = other.m;\n    var tm0 = m[0],\n        tm1 = m[1],\n        tm2 = m[2],\n        tm3 = m[3];\n    var tm4 = m[4],\n        tm5 = m[5],\n        tm6 = m[6],\n        tm7 = m[7];\n    var tm8 = m[8],\n        tm9 = m[9],\n        tm10 = m[10],\n        tm11 = m[11];\n    var tm12 = m[12],\n        tm13 = m[13],\n        tm14 = m[14],\n        tm15 = m[15];\n    var om0 = otherM[0],\n        om1 = otherM[1],\n        om2 = otherM[2],\n        om3 = otherM[3];\n    var om4 = otherM[4],\n        om5 = otherM[5],\n        om6 = otherM[6],\n        om7 = otherM[7];\n    var om8 = otherM[8],\n        om9 = otherM[9],\n        om10 = otherM[10],\n        om11 = otherM[11];\n    var om12 = otherM[12],\n        om13 = otherM[13],\n        om14 = otherM[14],\n        om15 = otherM[15];\n    result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\n    result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\n    result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\n    result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\n    result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\n    result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\n    result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\n    result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\n    result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\n    result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\n    result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\n    result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\n    result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\n    result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\n    result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\n    result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\n    return this;\n  };\n  /**\r\n   * Check equality between this matrix and a second one\r\n   * @param value defines the second matrix to compare\r\n   * @returns true is the current matrix and the given one values are strictly equal\r\n   */\n\n\n  Matrix.prototype.equals = function (value) {\n    var other = value;\n\n    if (!other) {\n      return false;\n    }\n\n    if (this._isIdentity || other._isIdentity) {\n      if (!this._isIdentityDirty && !other._isIdentityDirty) {\n        return this._isIdentity && other._isIdentity;\n      }\n    }\n\n    var m = this.m;\n    var om = other.m;\n    return m[0] === om[0] && m[1] === om[1] && m[2] === om[2] && m[3] === om[3] && m[4] === om[4] && m[5] === om[5] && m[6] === om[6] && m[7] === om[7] && m[8] === om[8] && m[9] === om[9] && m[10] === om[10] && m[11] === om[11] && m[12] === om[12] && m[13] === om[13] && m[14] === om[14] && m[15] === om[15];\n  };\n  /**\r\n   * Clone the current matrix\r\n   * @returns a new matrix from the current matrix\r\n   */\n\n\n  Matrix.prototype.clone = function () {\n    var matrix = new Matrix();\n    matrix.copyFrom(this);\n    return matrix;\n  };\n  /**\r\n   * Returns the name of the current matrix class\r\n   * @returns the string \"Matrix\"\r\n   */\n\n\n  Matrix.prototype.getClassName = function () {\n    return \"Matrix\";\n  };\n  /**\r\n   * Gets the hash code of the current matrix\r\n   * @returns the hash code\r\n   */\n\n\n  Matrix.prototype.getHashCode = function () {\n    var hash = this._m[0] | 0;\n\n    for (var i = 1; i < 16; i++) {\n      hash = hash * 397 ^ (this._m[i] | 0);\n    }\n\n    return hash;\n  };\n  /**\r\n   * Decomposes the current Matrix into a translation, rotation and scaling components\r\n   * @param scale defines the scale vector3 given as a reference to update\r\n   * @param rotation defines the rotation quaternion given as a reference to update\r\n   * @param translation defines the translation vector3 given as a reference to update\r\n   * @returns true if operation was successful\r\n   */\n\n\n  Matrix.prototype.decompose = function (scale, rotation, translation) {\n    if (this._isIdentity) {\n      if (translation) {\n        translation.setAll(0);\n      }\n\n      if (scale) {\n        scale.setAll(1);\n      }\n\n      if (rotation) {\n        rotation.copyFromFloats(0, 0, 0, 1);\n      }\n\n      return true;\n    }\n\n    var m = this._m;\n\n    if (translation) {\n      translation.copyFromFloats(m[12], m[13], m[14]);\n    }\n\n    scale = scale || MathTmp.Vector3[0];\n    scale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\n    scale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\n    scale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\n\n    if (this.determinant() <= 0) {\n      scale.y *= -1;\n    }\n\n    if (scale.x === 0 || scale.y === 0 || scale.z === 0) {\n      if (rotation) {\n        rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\n      }\n\n      return false;\n    }\n\n    if (rotation) {\n      var sx = 1 / scale.x,\n          sy = 1 / scale.y,\n          sz = 1 / scale.z;\n      Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, MathTmp.Matrix[0]);\n      Quaternion.FromRotationMatrixToRef(MathTmp.Matrix[0], rotation);\n    }\n\n    return true;\n  };\n  /**\r\n   * Gets specific row of the matrix\r\n   * @param index defines the number of the row to get\r\n   * @returns the index-th row of the current matrix as a new Vector4\r\n   */\n\n\n  Matrix.prototype.getRow = function (index) {\n    if (index < 0 || index > 3) {\n      return null;\n    }\n\n    var i = index * 4;\n    return new Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\n  };\n  /**\r\n   * Sets the index-th row of the current matrix to the vector4 values\r\n   * @param index defines the number of the row to set\r\n   * @param row defines the target vector4\r\n   * @returns the updated current matrix\r\n   */\n\n\n  Matrix.prototype.setRow = function (index, row) {\n    return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\n  };\n  /**\r\n   * Compute the transpose of the matrix\r\n   * @returns the new transposed matrix\r\n   */\n\n\n  Matrix.prototype.transpose = function () {\n    return Matrix.Transpose(this);\n  };\n  /**\r\n   * Compute the transpose of the matrix and store it in a given matrix\r\n   * @param result defines the target matrix\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.transposeToRef = function (result) {\n    Matrix.TransposeToRef(this, result);\n    return this;\n  };\n  /**\r\n   * Sets the index-th row of the current matrix with the given 4 x float values\r\n   * @param index defines the row index\r\n   * @param x defines the x component to set\r\n   * @param y defines the y component to set\r\n   * @param z defines the z component to set\r\n   * @param w defines the w component to set\r\n   * @returns the updated current matrix\r\n   */\n\n\n  Matrix.prototype.setRowFromFloats = function (index, x, y, z, w) {\n    if (index < 0 || index > 3) {\n      return this;\n    }\n\n    var i = index * 4;\n    this._m[i + 0] = x;\n    this._m[i + 1] = y;\n    this._m[i + 2] = z;\n    this._m[i + 3] = w;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Compute a new matrix set with the current matrix values multiplied by scale (float)\r\n   * @param scale defines the scale factor\r\n   * @returns a new matrix\r\n   */\n\n\n  Matrix.prototype.scale = function (scale) {\n    var result = new Matrix();\n    this.scaleToRef(scale, result);\n    return result;\n  };\n  /**\r\n   * Scale the current matrix values by a factor to a given result matrix\r\n   * @param scale defines the scale factor\r\n   * @param result defines the matrix to store the result\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.scaleToRef = function (scale, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] = this._m[index] * scale;\n    }\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Scale the current matrix values by a factor and add the result to a given matrix\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Matrix to store the result\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.scaleAndAddToRef = function (scale, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] += this._m[index] * scale;\n    }\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\r\n   * @param ref matrix to store the result\r\n   */\n\n\n  Matrix.prototype.toNormalMatrix = function (ref) {\n    var tmp = MathTmp.Matrix[0];\n    this.invertToRef(tmp);\n    tmp.transposeToRef(ref);\n    var m = ref._m;\n    Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\n  };\n  /**\r\n   * Gets only rotation part of the current matrix\r\n   * @returns a new matrix sets to the extracted rotation matrix from the current one\r\n   */\n\n\n  Matrix.prototype.getRotationMatrix = function () {\n    var result = new Matrix();\n    this.getRotationMatrixToRef(result);\n    return result;\n  };\n  /**\r\n   * Extracts the rotation matrix from the current one and sets it as the given \"result\"\r\n   * @param result defines the target matrix to store data to\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.getRotationMatrixToRef = function (result) {\n    var scale = MathTmp.Vector3[0];\n\n    if (!this.decompose(scale)) {\n      Matrix.IdentityToRef(result);\n      return this;\n    }\n\n    var m = this._m;\n    var sx = 1 / scale.x,\n        sy = 1 / scale.y,\n        sz = 1 / scale.z;\n    Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n    return this;\n  };\n  /**\r\n   * Toggles model matrix from being right handed to left handed in place and vice versa\r\n   */\n\n\n  Matrix.prototype.toggleModelMatrixHandInPlace = function () {\n    var m = this._m;\n    m[2] *= -1;\n    m[6] *= -1;\n    m[8] *= -1;\n    m[9] *= -1;\n    m[14] *= -1;\n\n    this._markAsUpdated();\n  };\n  /**\r\n   * Toggles projection matrix from being right handed to left handed in place and vice versa\r\n   */\n\n\n  Matrix.prototype.toggleProjectionMatrixHandInPlace = function () {\n    var m = this._m;\n    m[8] *= -1;\n    m[9] *= -1;\n    m[10] *= -1;\n    m[11] *= -1;\n\n    this._markAsUpdated();\n  }; // Statics\n\n  /**\r\n   * Creates a matrix from an array\r\n   * @param array defines the source array\r\n   * @param offset defines an offset in the source array\r\n   * @returns a new Matrix set from the starting index of the given array\r\n   */\n\n\n  Matrix.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    var result = new Matrix();\n    Matrix.FromArrayToRef(array, offset, result);\n    return result;\n  };\n  /**\r\n   * Copy the content of an array into a given matrix\r\n   * @param array defines the source array\r\n   * @param offset defines an offset in the source array\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromArrayToRef = function (array, offset, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] = array[index + offset];\n    }\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Stores an array into a matrix after having multiplied each component by a given factor\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @param scale defines the scaling factor\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromFloat32ArrayToRefScaled = function (array, offset, scale, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] = array[index + offset] * scale;\n    }\n\n    result._markAsUpdated();\n  };\n\n  Object.defineProperty(Matrix, \"IdentityReadOnly\", {\n    /**\r\n     * Gets an identity matrix that must not be updated\r\n     */\n    get: function get() {\n      return Matrix._identityReadOnly;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Stores a list of values (16) inside a given matrix\r\n   * @param initialM11 defines 1st value of 1st row\r\n   * @param initialM12 defines 2nd value of 1st row\r\n   * @param initialM13 defines 3rd value of 1st row\r\n   * @param initialM14 defines 4th value of 1st row\r\n   * @param initialM21 defines 1st value of 2nd row\r\n   * @param initialM22 defines 2nd value of 2nd row\r\n   * @param initialM23 defines 3rd value of 2nd row\r\n   * @param initialM24 defines 4th value of 2nd row\r\n   * @param initialM31 defines 1st value of 3rd row\r\n   * @param initialM32 defines 2nd value of 3rd row\r\n   * @param initialM33 defines 3rd value of 3rd row\r\n   * @param initialM34 defines 4th value of 3rd row\r\n   * @param initialM41 defines 1st value of 4th row\r\n   * @param initialM42 defines 2nd value of 4th row\r\n   * @param initialM43 defines 3rd value of 4th row\r\n   * @param initialM44 defines 4th value of 4th row\r\n   * @param result defines the target matrix\r\n   */\n\n  Matrix.FromValuesToRef = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\n    var m = result._m;\n    m[0] = initialM11;\n    m[1] = initialM12;\n    m[2] = initialM13;\n    m[3] = initialM14;\n    m[4] = initialM21;\n    m[5] = initialM22;\n    m[6] = initialM23;\n    m[7] = initialM24;\n    m[8] = initialM31;\n    m[9] = initialM32;\n    m[10] = initialM33;\n    m[11] = initialM34;\n    m[12] = initialM41;\n    m[13] = initialM42;\n    m[14] = initialM43;\n    m[15] = initialM44;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates new matrix from a list of values (16)\r\n   * @param initialM11 defines 1st value of 1st row\r\n   * @param initialM12 defines 2nd value of 1st row\r\n   * @param initialM13 defines 3rd value of 1st row\r\n   * @param initialM14 defines 4th value of 1st row\r\n   * @param initialM21 defines 1st value of 2nd row\r\n   * @param initialM22 defines 2nd value of 2nd row\r\n   * @param initialM23 defines 3rd value of 2nd row\r\n   * @param initialM24 defines 4th value of 2nd row\r\n   * @param initialM31 defines 1st value of 3rd row\r\n   * @param initialM32 defines 2nd value of 3rd row\r\n   * @param initialM33 defines 3rd value of 3rd row\r\n   * @param initialM34 defines 4th value of 3rd row\r\n   * @param initialM41 defines 1st value of 4th row\r\n   * @param initialM42 defines 2nd value of 4th row\r\n   * @param initialM43 defines 3rd value of 4th row\r\n   * @param initialM44 defines 4th value of 4th row\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.FromValues = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\n    var result = new Matrix();\n    var m = result._m;\n    m[0] = initialM11;\n    m[1] = initialM12;\n    m[2] = initialM13;\n    m[3] = initialM14;\n    m[4] = initialM21;\n    m[5] = initialM22;\n    m[6] = initialM23;\n    m[7] = initialM24;\n    m[8] = initialM31;\n    m[9] = initialM32;\n    m[10] = initialM33;\n    m[11] = initialM34;\n    m[12] = initialM41;\n    m[13] = initialM42;\n    m[14] = initialM43;\n    m[15] = initialM44;\n\n    result._markAsUpdated();\n\n    return result;\n  };\n  /**\r\n   * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\r\n   * @param scale defines the scale vector3\r\n   * @param rotation defines the rotation quaternion\r\n   * @param translation defines the translation vector3\r\n   * @returns a new matrix\r\n   */\n\n\n  Matrix.Compose = function (scale, rotation, translation) {\n    var result = new Matrix();\n    Matrix.ComposeToRef(scale, rotation, translation, result);\n    return result;\n  };\n  /**\r\n   * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\r\n   * @param scale defines the scale vector3\r\n   * @param rotation defines the rotation quaternion\r\n   * @param translation defines the translation vector3\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.ComposeToRef = function (scale, rotation, translation, result) {\n    var m = result._m;\n    var x = rotation.x,\n        y = rotation.y,\n        z = rotation.z,\n        w = rotation.w;\n    var x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n    var xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n    var yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n    var wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n    var sx = scale.x,\n        sy = scale.y,\n        sz = scale.z;\n    m[0] = (1 - (yy + zz)) * sx;\n    m[1] = (xy + wz) * sx;\n    m[2] = (xz - wy) * sx;\n    m[3] = 0;\n    m[4] = (xy - wz) * sy;\n    m[5] = (1 - (xx + zz)) * sy;\n    m[6] = (yz + wx) * sy;\n    m[7] = 0;\n    m[8] = (xz + wy) * sz;\n    m[9] = (yz - wx) * sz;\n    m[10] = (1 - (xx + yy)) * sz;\n    m[11] = 0;\n    m[12] = translation.x;\n    m[13] = translation.y;\n    m[14] = translation.z;\n    m[15] = 1;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates a new identity matrix\r\n   * @returns a new identity matrix\r\n   */\n\n\n  Matrix.Identity = function () {\n    var identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n\n    identity._updateIdentityStatus(true);\n\n    return identity;\n  };\n  /**\r\n   * Creates a new identity matrix and stores the result in a given matrix\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.IdentityToRef = function (result) {\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(true);\n  };\n  /**\r\n   * Creates a new zero matrix\r\n   * @returns a new zero matrix\r\n   */\n\n\n  Matrix.Zero = function () {\n    var zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n\n    zero._updateIdentityStatus(false);\n\n    return zero;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the X axis\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationX = function (angle) {\n    var result = new Matrix();\n    Matrix.RotationXToRef(angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new matrix as the invert of a given matrix\r\n   * @param source defines the source matrix\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Invert = function (source) {\n    var result = new Matrix();\n    source.invertToRef(result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationXToRef = function (angle, result) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(c === 1 && s === 0);\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Y axis\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationY = function (angle) {\n    var result = new Matrix();\n    Matrix.RotationYToRef(angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationYToRef = function (angle, result) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n    Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(c === 1 && s === 0);\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Z axis\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationZ = function (angle) {\n    var result = new Matrix();\n    Matrix.RotationZToRef(angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationZToRef = function (angle, result) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n    Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(c === 1 && s === 0);\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the given axis\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationAxis = function (axis, angle) {\n    var result = new Matrix();\n    Matrix.RotationAxisToRef(axis, angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationAxisToRef = function (axis, angle, result) {\n    var s = Math.sin(-angle);\n    var c = Math.cos(-angle);\n    var c1 = 1 - c;\n    axis.normalize();\n    var m = result._m;\n    m[0] = axis.x * axis.x * c1 + c;\n    m[1] = axis.x * axis.y * c1 - axis.z * s;\n    m[2] = axis.x * axis.z * c1 + axis.y * s;\n    m[3] = 0.0;\n    m[4] = axis.y * axis.x * c1 + axis.z * s;\n    m[5] = axis.y * axis.y * c1 + c;\n    m[6] = axis.y * axis.z * c1 - axis.x * s;\n    m[7] = 0.0;\n    m[8] = axis.z * axis.x * c1 - axis.y * s;\n    m[9] = axis.z * axis.y * c1 + axis.x * s;\n    m[10] = axis.z * axis.z * c1 + c;\n    m[11] = 0.0;\n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = 0.0;\n    m[15] = 1.0;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Takes normalised vectors and returns a rotation matrix to align \"from\" with \"to\".\r\n   * Taken from http://www.iquilezles.org/www/articles/noacos/noacos.htm\r\n   * @param from defines the vector to align\r\n   * @param to defines the vector to align to\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationAlignToRef = function (from, to, result) {\n    var v = Vector3.Cross(to, from);\n    var c = Vector3.Dot(to, from);\n    var k = 1 / (1 + c);\n    var m = result._m;\n    m[0] = v.x * v.x * k + c;\n    m[1] = v.y * v.x * k - v.z;\n    m[2] = v.z * v.x * k + v.y;\n    m[3] = 0;\n    m[4] = v.x * v.y * k + v.z;\n    m[5] = v.y * v.y * k + c;\n    m[6] = v.z * v.y * k - v.x;\n    m[7] = 0;\n    m[8] = v.x * v.z * k - v.y;\n    m[9] = v.y * v.z * k + v.x;\n    m[10] = v.z * v.z * k + c;\n    m[11] = 0;\n    m[12] = 0;\n    m[13] = 0;\n    m[14] = 0;\n    m[15] = 1;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates a rotation matrix\r\n   * @param yaw defines the yaw angle in radians (Y axis)\r\n   * @param pitch defines the pitch angle in radians (X axis)\r\n   * @param roll defines the roll angle in radians (X axis)\r\n   * @returns the new rotation matrix\r\n   */\n\n\n  Matrix.RotationYawPitchRoll = function (yaw, pitch, roll) {\n    var result = new Matrix();\n    Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\n    return result;\n  };\n  /**\r\n   * Creates a rotation matrix and stores it in a given matrix\r\n   * @param yaw defines the yaw angle in radians (Y axis)\r\n   * @param pitch defines the pitch angle in radians (X axis)\r\n   * @param roll defines the roll angle in radians (X axis)\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\n    Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, MathTmp.Quaternion[0]);\n    MathTmp.Quaternion[0].toRotationMatrix(result);\n  };\n  /**\r\n   * Creates a scaling matrix\r\n   * @param x defines the scale factor on X axis\r\n   * @param y defines the scale factor on Y axis\r\n   * @param z defines the scale factor on Z axis\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Scaling = function (x, y, z) {\n    var result = new Matrix();\n    Matrix.ScalingToRef(x, y, z, result);\n    return result;\n  };\n  /**\r\n   * Creates a scaling matrix and stores it in a given matrix\r\n   * @param x defines the scale factor on X axis\r\n   * @param y defines the scale factor on Y axis\r\n   * @param z defines the scale factor on Z axis\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.ScalingToRef = function (x, y, z, result) {\n    Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\n  };\n  /**\r\n   * Creates a translation matrix\r\n   * @param x defines the translation on X axis\r\n   * @param y defines the translation on Y axis\r\n   * @param z defines the translationon Z axis\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Translation = function (x, y, z) {\n    var result = new Matrix();\n    Matrix.TranslationToRef(x, y, z, result);\n    return result;\n  };\n  /**\r\n   * Creates a translation matrix and stores it in a given matrix\r\n   * @param x defines the translation on X axis\r\n   * @param y defines the translation on Y axis\r\n   * @param z defines the translationon Z axis\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.TranslationToRef = function (x, y, z, result) {\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\n\n    result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\n  };\n  /**\r\n   * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\r\n   * @param startValue defines the start value\r\n   * @param endValue defines the end value\r\n   * @param gradient defines the gradient factor\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Lerp = function (startValue, endValue, gradient) {\n    var result = new Matrix();\n    Matrix.LerpToRef(startValue, endValue, gradient, result);\n    return result;\n  };\n  /**\r\n   * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\r\n   * @param startValue defines the start value\r\n   * @param endValue defines the end value\r\n   * @param gradient defines the gradient factor\r\n   * @param result defines the Matrix object where to store data\r\n   */\n\n\n  Matrix.LerpToRef = function (startValue, endValue, gradient, result) {\n    var resultM = result._m;\n    var startM = startValue.m;\n    var endM = endValue.m;\n\n    for (var index = 0; index < 16; index++) {\n      resultM[index] = startM[index] * (1.0 - gradient) + endM[index] * gradient;\n    }\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Builds a new matrix whose values are computed by:\r\n   * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\r\n   * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\r\n   * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\r\n   * @param startValue defines the first matrix\r\n   * @param endValue defines the second matrix\r\n   * @param gradient defines the gradient between the two matrices\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.DecomposeLerp = function (startValue, endValue, gradient) {\n    var result = new Matrix();\n    Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\n    return result;\n  };\n  /**\r\n   * Update a matrix to values which are computed by:\r\n   * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\r\n   * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\r\n   * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\r\n   * @param startValue defines the first matrix\r\n   * @param endValue defines the second matrix\r\n   * @param gradient defines the gradient between the two matrices\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.DecomposeLerpToRef = function (startValue, endValue, gradient, result) {\n    var startScale = MathTmp.Vector3[0];\n    var startRotation = MathTmp.Quaternion[0];\n    var startTranslation = MathTmp.Vector3[1];\n    startValue.decompose(startScale, startRotation, startTranslation);\n    var endScale = MathTmp.Vector3[2];\n    var endRotation = MathTmp.Quaternion[1];\n    var endTranslation = MathTmp.Vector3[3];\n    endValue.decompose(endScale, endRotation, endTranslation);\n    var resultScale = MathTmp.Vector3[4];\n    Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\n    var resultRotation = MathTmp.Quaternion[2];\n    Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\n    var resultTranslation = MathTmp.Vector3[5];\n    Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\n    Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\n  };\n  /**\r\n   * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\r\n   * This function works in left handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.LookAtLH = function (eye, target, up) {\n    var result = new Matrix();\n    Matrix.LookAtLHToRef(eye, target, up, result);\n    return result;\n  };\n  /**\r\n   * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\r\n   * This function works in left handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.LookAtLHToRef = function (eye, target, up, result) {\n    var xAxis = MathTmp.Vector3[0];\n    var yAxis = MathTmp.Vector3[1];\n    var zAxis = MathTmp.Vector3[2]; // Z axis\n\n    target.subtractToRef(eye, zAxis);\n    zAxis.normalize(); // X axis\n\n    Vector3.CrossToRef(up, zAxis, xAxis);\n    var xSquareLength = xAxis.lengthSquared();\n\n    if (xSquareLength === 0) {\n      xAxis.x = 1.0;\n    } else {\n      xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n    } // Y axis\n\n\n    Vector3.CrossToRef(zAxis, xAxis, yAxis);\n    yAxis.normalize(); // Eye angles\n\n    var ex = -Vector3.Dot(xAxis, eye);\n    var ey = -Vector3.Dot(yAxis, eye);\n    var ez = -Vector3.Dot(zAxis, eye);\n    Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n  };\n  /**\r\n   * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\r\n   * This function works in right handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.LookAtRH = function (eye, target, up) {\n    var result = new Matrix();\n    Matrix.LookAtRHToRef(eye, target, up, result);\n    return result;\n  };\n  /**\r\n   * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\r\n   * This function works in right handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.LookAtRHToRef = function (eye, target, up, result) {\n    var xAxis = MathTmp.Vector3[0];\n    var yAxis = MathTmp.Vector3[1];\n    var zAxis = MathTmp.Vector3[2]; // Z axis\n\n    eye.subtractToRef(target, zAxis);\n    zAxis.normalize(); // X axis\n\n    Vector3.CrossToRef(up, zAxis, xAxis);\n    var xSquareLength = xAxis.lengthSquared();\n\n    if (xSquareLength === 0) {\n      xAxis.x = 1.0;\n    } else {\n      xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n    } // Y axis\n\n\n    Vector3.CrossToRef(zAxis, xAxis, yAxis);\n    yAxis.normalize(); // Eye angles\n\n    var ex = -Vector3.Dot(xAxis, eye);\n    var ey = -Vector3.Dot(yAxis, eye);\n    var ez = -Vector3.Dot(zAxis, eye);\n    Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n  };\n  /**\r\n   * Create a left-handed orthographic projection matrix\r\n   * @param width defines the viewport width\r\n   * @param height defines the viewport height\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed orthographic projection matrix\r\n   */\n\n\n  Matrix.OrthoLH = function (width, height, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Store a left-handed orthographic projection to a given matrix\r\n   * @param width defines the viewport width\r\n   * @param height defines the viewport height\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.OrthoLHToRef = function (width, height, znear, zfar, result) {\n    var n = znear;\n    var f = zfar;\n    var a = 2.0 / width;\n    var b = 2.0 / height;\n    var c = 2.0 / (f - n);\n    var d = -(f + n) / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\n\n    result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\n  };\n  /**\r\n   * Create a left-handed orthographic projection matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed orthographic projection matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterLH = function (left, right, bottom, top, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a left-handed orthographic projection into a given matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterLHToRef = function (left, right, bottom, top, znear, zfar, result) {\n    var n = znear;\n    var f = zfar;\n    var a = 2.0 / (right - left);\n    var b = 2.0 / (top - bottom);\n    var c = 2.0 / (f - n);\n    var d = -(f + n) / (f - n);\n    var i0 = (left + right) / (left - right);\n    var i1 = (top + bottom) / (bottom - top);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates a right-handed orthographic projection matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a right-handed orthographic projection matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterRH = function (left, right, bottom, top, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a right-handed orthographic projection into a given matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterRHToRef = function (left, right, bottom, top, znear, zfar, result) {\n    Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);\n    result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\n  };\n  /**\r\n   * Creates a left-handed perspective projection matrix\r\n   * @param width defines the viewport width\r\n   * @param height defines the viewport height\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed perspective projection matrix\r\n   */\n\n\n  Matrix.PerspectiveLH = function (width, height, znear, zfar) {\n    var matrix = new Matrix();\n    var n = znear;\n    var f = zfar;\n    var a = 2.0 * n / width;\n    var b = 2.0 * n / height;\n    var c = (f + n) / (f - n);\n    var d = -2.0 * f * n / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\n\n    matrix._updateIdentityStatus(false);\n\n    return matrix;\n  };\n  /**\r\n   * Creates a left-handed perspective projection matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed perspective projection matrix\r\n   */\n\n\n  Matrix.PerspectiveFovLH = function (fov, aspect, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a left-handed perspective projection into a given matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovLHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var n = znear;\n    var f = zfar;\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    var c = (f + n) / (f - n);\n    var d = -2.0 * f * n / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Stores a left-handed perspective projection into a given matrix with depth reversed\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar not used as infinity is used as far clip\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovReverseLHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, -znear, 1.0, 0.0, 0.0, 1.0, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Creates a right-handed perspective projection matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a right-handed perspective projection matrix\r\n   */\n\n\n  Matrix.PerspectiveFovRH = function (fov, aspect, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a right-handed perspective projection into a given matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovRHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    //alternatively this could be expressed as:\n    //    m = PerspectiveFovLHToRef\n    //    m[10] *= -1.0;\n    //    m[11] *= -1.0;\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var n = znear;\n    var f = zfar;\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    var c = -(f + n) / (f - n);\n    var d = -2 * f * n / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Stores a right-handed perspective projection into a given matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar not used as infinity is used as far clip\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovReverseRHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    //alternatively this could be expressed as:\n    //    m = PerspectiveFovLHToRef\n    //    m[10] *= -1.0;\n    //    m[11] *= -1.0;\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, -znear, -1.0, 0.0, 0.0, -1.0, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Stores a perspective projection for WebVR info a given matrix\r\n   * @param fov defines the field of view\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   * @param rightHanded defines if the matrix must be in right-handed mode (false by default)\r\n   */\n\n\n  Matrix.PerspectiveFovWebVRToRef = function (fov, znear, zfar, result, rightHanded) {\n    if (rightHanded === void 0) {\n      rightHanded = false;\n    }\n\n    var rightHandedFactor = rightHanded ? -1 : 1;\n    var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n    var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n    var xScale = 2.0 / (leftTan + rightTan);\n    var yScale = 2.0 / (upTan + downTan);\n    var m = result._m;\n    m[0] = xScale;\n    m[1] = m[2] = m[3] = m[4] = 0.0;\n    m[5] = yScale;\n    m[6] = m[7] = 0.0;\n    m[8] = (leftTan - rightTan) * xScale * 0.5;\n    m[9] = -((upTan - downTan) * yScale * 0.5);\n    m[10] = -zfar / (znear - zfar);\n    m[11] = 1.0 * rightHandedFactor;\n    m[12] = m[13] = m[15] = 0.0;\n    m[14] = -(2.0 * zfar * znear) / (zfar - znear);\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Computes a complete transformation matrix\r\n   * @param viewport defines the viewport to use\r\n   * @param world defines the world matrix\r\n   * @param view defines the view matrix\r\n   * @param projection defines the projection matrix\r\n   * @param zmin defines the near clip plane\r\n   * @param zmax defines the far clip plane\r\n   * @returns the transformation matrix\r\n   */\n\n\n  Matrix.GetFinalMatrix = function (viewport, world, view, projection, zmin, zmax) {\n    var cw = viewport.width;\n    var ch = viewport.height;\n    var cx = viewport.x;\n    var cy = viewport.y;\n    var viewportMatrix = Matrix.FromValues(cw / 2.0, 0.0, 0.0, 0.0, 0.0, -ch / 2.0, 0.0, 0.0, 0.0, 0.0, zmax - zmin, 0.0, cx + cw / 2.0, ch / 2.0 + cy, zmin, 1.0);\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(view, matrix);\n    matrix.multiplyToRef(projection, matrix);\n    return matrix.multiply(viewportMatrix);\n  };\n  /**\r\n   * Extracts a 2x2 matrix from a given matrix and store the result in a Float32Array\r\n   * @param matrix defines the matrix to use\r\n   * @returns a new Float32Array array with 4 elements : the 2x2 matrix extracted from the given matrix\r\n   */\n\n\n  Matrix.GetAsMatrix2x2 = function (matrix) {\n    var m = matrix.m;\n    return new Float32Array([m[0], m[1], m[4], m[5]]);\n  };\n  /**\r\n   * Extracts a 3x3 matrix from a given matrix and store the result in a Float32Array\r\n   * @param matrix defines the matrix to use\r\n   * @returns a new Float32Array array with 9 elements : the 3x3 matrix extracted from the given matrix\r\n   */\n\n\n  Matrix.GetAsMatrix3x3 = function (matrix) {\n    var m = matrix.m;\n    return new Float32Array([m[0], m[1], m[2], m[4], m[5], m[6], m[8], m[9], m[10]]);\n  };\n  /**\r\n   * Compute the transpose of a given matrix\r\n   * @param matrix defines the matrix to transpose\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Transpose = function (matrix) {\n    var result = new Matrix();\n    Matrix.TransposeToRef(matrix, result);\n    return result;\n  };\n  /**\r\n   * Compute the transpose of a matrix and store it in a target matrix\r\n   * @param matrix defines the matrix to transpose\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.TransposeToRef = function (matrix, result) {\n    var rm = result._m;\n    var mm = matrix.m;\n    rm[0] = mm[0];\n    rm[1] = mm[4];\n    rm[2] = mm[8];\n    rm[3] = mm[12];\n    rm[4] = mm[1];\n    rm[5] = mm[5];\n    rm[6] = mm[9];\n    rm[7] = mm[13];\n    rm[8] = mm[2];\n    rm[9] = mm[6];\n    rm[10] = mm[10];\n    rm[11] = mm[14];\n    rm[12] = mm[3];\n    rm[13] = mm[7];\n    rm[14] = mm[11];\n    rm[15] = mm[15]; // identity-ness does not change when transposing\n\n    result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);\n  };\n  /**\r\n   * Computes a reflection matrix from a plane\r\n   * @param plane defines the reflection plane\r\n   * @returns a new matrix\r\n   */\n\n\n  Matrix.Reflection = function (plane) {\n    var matrix = new Matrix();\n    Matrix.ReflectionToRef(plane, matrix);\n    return matrix;\n  };\n  /**\r\n   * Computes a reflection matrix from a plane\r\n   * @param plane defines the reflection plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.ReflectionToRef = function (plane, result) {\n    plane.normalize();\n    var x = plane.normal.x;\n    var y = plane.normal.y;\n    var z = plane.normal.z;\n    var temp = -2 * x;\n    var temp2 = -2 * y;\n    var temp3 = -2 * z;\n    Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\n  };\n  /**\r\n   * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\r\n   * @param xaxis defines the value of the 1st axis\r\n   * @param yaxis defines the value of the 2nd axis\r\n   * @param zaxis defines the value of the 3rd axis\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromXYZAxesToRef = function (xaxis, yaxis, zaxis, result) {\n    Matrix.FromValuesToRef(xaxis.x, xaxis.y, xaxis.z, 0.0, yaxis.x, yaxis.y, yaxis.z, 0.0, zaxis.x, zaxis.y, zaxis.z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n  };\n  /**\r\n   * Creates a rotation matrix from a quaternion and stores it in a target matrix\r\n   * @param quat defines the quaternion to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromQuaternionToRef = function (quat, result) {\n    var xx = quat.x * quat.x;\n    var yy = quat.y * quat.y;\n    var zz = quat.z * quat.z;\n    var xy = quat.x * quat.y;\n    var zw = quat.z * quat.w;\n    var zx = quat.z * quat.x;\n    var yw = quat.y * quat.w;\n    var yz = quat.y * quat.z;\n    var xw = quat.x * quat.w;\n    result._m[0] = 1.0 - 2.0 * (yy + zz);\n    result._m[1] = 2.0 * (xy + zw);\n    result._m[2] = 2.0 * (zx - yw);\n    result._m[3] = 0.0;\n    result._m[4] = 2.0 * (xy - zw);\n    result._m[5] = 1.0 - 2.0 * (zz + xx);\n    result._m[6] = 2.0 * (yz + xw);\n    result._m[7] = 0.0;\n    result._m[8] = 2.0 * (zx + yw);\n    result._m[9] = 2.0 * (yz - xw);\n    result._m[10] = 1.0 - 2.0 * (yy + xx);\n    result._m[11] = 0.0;\n    result._m[12] = 0.0;\n    result._m[13] = 0.0;\n    result._m[14] = 0.0;\n    result._m[15] = 1.0;\n\n    result._markAsUpdated();\n  };\n\n  Matrix._updateFlagSeed = 0;\n  Matrix._identityReadOnly = Matrix.Identity();\n  return Matrix;\n}();\n\nexport { Matrix };\n/**\r\n * @hidden\r\n * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\r\n */\n\nvar MathTmp =\n/** @class */\nfunction () {\n  function MathTmp() {}\n\n  MathTmp.Vector3 = ArrayTools.BuildArray(6, Vector3.Zero);\n  MathTmp.Matrix = ArrayTools.BuildArray(2, Matrix.Identity);\n  MathTmp.Quaternion = ArrayTools.BuildArray(3, Quaternion.Zero);\n  return MathTmp;\n}();\n/**\r\n * @hidden\r\n */\n\n\nvar TmpVectors =\n/** @class */\nfunction () {\n  function TmpVectors() {}\n\n  TmpVectors.Vector2 = ArrayTools.BuildArray(3, Vector2.Zero); // 3 temp Vector2 at once should be enough\n\n  TmpVectors.Vector3 = ArrayTools.BuildArray(13, Vector3.Zero); // 13 temp Vector3 at once should be enough\n\n  TmpVectors.Vector4 = ArrayTools.BuildArray(3, Vector4.Zero); // 3 temp Vector4 at once should be enough\n\n  TmpVectors.Quaternion = ArrayTools.BuildArray(2, Quaternion.Zero); // 2 temp Quaternion at once should be enough\n\n  TmpVectors.Matrix = ArrayTools.BuildArray(8, Matrix.Identity); // 8 temp Matrices at once should be enough\n\n  return TmpVectors;\n}();\n\nexport { TmpVectors };\n_TypeStore.RegisteredTypes[\"BABYLON.Vector2\"] = Vector2;\n_TypeStore.RegisteredTypes[\"BABYLON.Vector3\"] = Vector3;\n_TypeStore.RegisteredTypes[\"BABYLON.Vector4\"] = Vector4;\n_TypeStore.RegisteredTypes[\"BABYLON.Matrix\"] = Matrix;"],"sourceRoot":""}